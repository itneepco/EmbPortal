<Button OnClick="() => AddEditMBSheet()" Icon="@IconType.Outline.Plus">Add New</Button>

<Button OnClick="() => OpenSideDrawer()" Icon="@IconType.Outline.Plus" Type="@ButtonType.Primary" style="margin-bottom: 0.5rem;">
    Add MB Sheet
</Button>

<Table Loading="@loading" TItem="MBSheetResponse" Size="@TableSize.Small" DataSource="@mbSheets" HidePagination>
    <RowTemplate>
        <Column Title="Id" @bind-Field="@context.Id" />
        <Column Title="MB Sheet Title" @bind-Field="@context.Title" />
        <Column Title="Measurement Date" @bind-Field="@context.MeasurementDate" />
        <Column Title="Measurement Officer" @bind-Field="@context.MeasurementOfficer" />
        <Column Title="Validating Officer" @bind-Field="@context.ValidationOfficer" />
        <Column @bind-Field="@context.Status">
            @if (context.Status == MBSheetStatus.ACCEPTED.ToString())
            {
                <Tag Color="gold">@context.Status</Tag>
            }
            else if (context.Status == MBSheetStatus.VALIDATED.ToString())
            {
                <Tag Color="blue">@context.Status</Tag>
            }
            else
            {
                <Tag Color="green">@context.Status</Tag>
            }
        </Column>
        <ActionColumn Title="Action" Width="20%">
            @if (context.Status == MBSheetStatus.CREATED.ToString())
            {
                <Button Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" OnClick="_=> OpenSideDrawer(context.Id)">Edit</Button>
                @if (employeeCode == context.MeasurementOfficer)
                {
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> DeleteMBSheet(context.Id)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Loading="@loading" Danger>Delete</Button>
                    </Popconfirm>
                }
            }
            @if (context.Status == MBSheetStatus.CREATED.ToString() && employeeCode == context.ValidationOfficer)
            {
                <Popconfirm Title="Sure to Validate MB Sheet?"
                            OnConfirm="()=> ValidateMBSheet(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Validate</Button>
                </Popconfirm>
            }
            @if (context.Status == MBSheetStatus.VALIDATED.ToString() && employeeCode == context.AcceptingOfficer)
            {
                <Popconfirm Title="Sure to Accept MB Sheet?"
                            OnConfirm="()=> AcceptMBSheet(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Accept</Button>
                </Popconfirm>
            }

        </ActionColumn>
    </RowTemplate>

    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Items" HidePagination>
            <Column TData="string" DataIndex="@nameof(context.Description)" Width="50%" />
            <Column TData="string" DataIndex="@nameof(context.Uom)" Width="12%" />
            <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" Width="12%" />
            <Column Title="Quantity" TData="float" DataIndex="@nameof(context.TotalQuantity)" Width="13%" />
            <Column Title="Total Amount" TData="float" DataIndex="@nameof(context.TotalAmount)" Width="13%" />
        </Table>
    </ExpandTemplate>
</Table>

<AddEditMBSheetDrawer CurrentMBSheet="currentMBSheet" MBookId="MBookId" MBItems="MBItems" Visible="@drawerVisible" OnClose="@CloseSideBar" />

@code {
    [Parameter]
    public int MBookId { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBItems { get; set; }

    string employeeCode;
    List<MBSheetResponse> mbSheets = new();
    MBSheetResponse currentMBSheet;
    bool drawerVisible = false;
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        employeeCode = state.User.GetEmployeeCodeFromClaimsPrincipal();

        await LoadMBSheets();
    }

    async Task LoadMBSheets()
    {
        loading = true;
        mbSheets = await mbSheetService.GetMBSheetsByMBookId(MBookId);
        loading = false;
    }

    void OpenSideDrawer(int itemId=0)
    {
        currentMBSheet = mbSheets.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void CloseSideBar()
    {
        drawerVisible = false;
    }

    async Task DeleteMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            mbSheets = mbSheets.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task ValidateMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.ValidateMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task AcceptMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.AcceptMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void AddEditMBSheet()
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet");
    }
}
