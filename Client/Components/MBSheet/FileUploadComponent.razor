@using System.Net.Http.Headers
@using EmbPortal.Shared.Constants

<Modal Title="@(IsUpload ? "Upload Files" : "Download Files")"
       Visible="@Visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">

    @if (IsUpload)
    {
        <p>
            <label>
                Upload up to @maxAllowedFiles files:
                <InputFile @key=@inputFileId OnChange="@OnInputFileChange" multiple />
            </label>
        </p>

        @if (files.Count > 0 && uploadResults.Count > 0)
        {
            <Spin Spinning="@loading">
                <ul>
                    @foreach (var file in files)
                    {
                        <li>
                            File: @file.Name
                            <br>
                            @if (FileUpload(uploadResults, file.Name, out var result))
                            {
                                <span>Stored File Name: @result.StoredFileName</span>
                            }
                            else
                            {
                                <span>There was an error uploading the file(Error: @result.ErrorCode).</span>
                            }
                        </li>
                    }
                </ul>
            </Spin>
        }
    }

    @if (CurrentMBSheetItem != null)
    {
        <Table TItem="ItemAttachmentResponse"
               DataSource="@CurrentMBSheetItem.Attachments"
               Loading="@loading"
               HidePagination Bordered>

            <Column Title="File Name" TData="string" DataIndex="@nameof(context.FileName)" Width="70%" />
            <ActionColumn Title="Actions" Width="30%">
                <Popconfirm Title="Sure to download?"
                            OnConfirm="()=> OnDownloadAttachment(context)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.Download)"
                            Shape="@ButtonShape.CircleOutline"
                            Size="@ButtonSize.Small">
                    </Button>
                </Popconfirm>

                @if (IsUpload)
                {
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="() => OnDeleteAttachment(context)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Icon="@(IconType.Outline.Delete)"
                                Shape="@ButtonShape.CircleOutline"
                                Danger
                                Style="margin-left: 0.25rem"
                                Size="@ButtonSize.Small">
                        </Button>
                    </Popconfirm>
                }
            </ActionColumn>
        </Table>
    }
</Modal>

@code{
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public MBSheetItemResponse CurrentMBSheetItem { get; set; }

    [Parameter]
    public EventCallback<MBSheetItemResponse> CurrentMBSheetItemChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemSubmit { get; set; }

    [CascadingParameter(Name = "MBSheetId")]
    public int MBSheetId { get; set; }

    [Parameter]
    public bool IsUpload { get; set; } = false;

    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = FileConstant.MaxFilesCount;
    private long maxFileSize = FileConstant.MaxFileSize;
    private string inputFileId = Guid.NewGuid().ToString();
    private bool loading;

    private void HandleOk(MouseEventArgs e)
    {
        VisibleChanged.InvokeAsync(false);
        ResetModal();
    }

    private void HandleCancel(MouseEventArgs e)
    {
        VisibleChanged.InvokeAsync(false);
        ResetModal();
    }

    async Task OnDeleteAttachment(ItemAttachmentResponse attachment)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheetItemAttachment(MBSheetId, CurrentMBSheetItem.Id, attachment.Id);
        loading = false;

        if (result.Succeeded)
        {
            CurrentMBSheetItem.Attachments = CurrentMBSheetItem.Attachments
                .Where(p => p.Id != attachment.Id).ToList();

            await CurrentMBSheetItemChanged.InvokeAsync(CurrentMBSheetItem);
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnDownloadAttachment(ItemAttachmentResponse attachment)
    {
        
    }

    void ResetModal()
    {
        files = new();
        uploadResults = new();
        inputFileId = Guid.NewGuid().ToString();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name
                    );

                    upload = true;
                }
                catch (Exception ex)
                {
                    messageService.Error(ex.Message);

                    uploadResults.Add(new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
                }
            }
        }

        if (upload)
        {
            loading = true;
            StateHasChanged();

            var response = await mbSheetService.UploadFiles(MBSheetId, CurrentMBSheetItem.Id, content);

            var newUploadResults = response.Data;

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
                await OnItemSubmit.InvokeAsync();
            }

            inputFileId = Guid.NewGuid().ToString();

            loading = false;
            StateHasChanged();
        }
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string fileName, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            // TODO
            Console.WriteLine(result);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string Name { get; set; }
    }
}