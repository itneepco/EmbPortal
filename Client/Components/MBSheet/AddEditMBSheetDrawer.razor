<Drawer Closable="true"
        Width="800"
        Title="@title"
        Visible="@Visible"
        OnClose="@Close">

    <Form Model="@model" OnFinish="@OnSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
        <FormItem Label="MB Sheet Title">
            <Input Placeholder="General Remarks" @bind-Value="@context.Title" TValue="string" AutoFocus />
        </FormItem>

        <FormItem Label="Measurement Date">
            <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.MeasurementDate" Format="dd-MM-yyyy" Style="width: 100%" />
        </FormItem>

        <MBSheetLineItems Items="@model.Items"></MBSheetLineItems>

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="Close">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

<style>
    .save {
        margin-right: 8px;
    }
</style>

@code {
    [Parameter]
    public int MBookId { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBItems { get; set; }

    [Parameter]
    public MBSheetResponse CurrentMBSheet { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    MBSheetRequest model = new MBSheetRequest
    {
        Items = new List<MBSheetItemRequest>()
    };

    bool loading = false;
    string title = "Add MB Sheet";

    protected override void OnParametersSet()
    {
        if (!Visible) return;

        model = new();
        model.MeasurementBookId = MBookId;
        model.Items = new List<MBSheetItemRequest>();


        if (CurrentMBSheet != null)
        {
            model.Title = CurrentMBSheet.Title;
            model.MeasurementDate = CurrentMBSheet.MeasurementDate;
        }

        foreach (var item in MBItems)
        {
            var currMBSheetItem = CurrentMBSheet != null ?
                CurrentMBSheet.Items.Find(p => p.MBookItemId == item.Id) : null;

            model.Items.Add(new MBSheetItemRequest
            {
                Id = currMBSheetItem != null ? currMBSheetItem.Id : 0,
                MBookItemId = item.Id,
                Description = item.Description,
                UnitRate = item.UnitRate,
                Uom = item.Uom,
                Dimension = item.Dimension,
                Value1 = currMBSheetItem != null ? currMBSheetItem.Value1 : 0,
                Value2 = currMBSheetItem != null ? currMBSheetItem.Value2 : 0,
                Value3 = currMBSheetItem != null ? currMBSheetItem.Value3 : 0
            });
        }
    }

    async Task OnSubmit()
    {
        if(model.Items.Where(p => p.Total > 0).ToList().Count < 1)
        {
            await messageService.Error("Please enter the value for atleast for one line item");
            return;
        }

        loading = true;
        dynamic result;
        if (CurrentMBSheet == null)
        {
            result = await mbSheetService.CreateMBSheet(model);
        }
        else
        {
            return; // TODO EDIT 
        }
        loading = false;

        if (result.Succeeded)
        {
            Close();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void Close()
    {
        OnClose.InvokeAsync();
    }
}
