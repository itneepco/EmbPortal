<Button OnClick="() => OpenSideDrawer(null)" Icon="@IconType.Outline.Plus" Style="margin-bottom: 0.5rem">
    Add Measurement
</Button>

<Table DataSource="@ModelItems" Size="TableSize.Small" HidePagination Bordered>
    <Column RowSpan="GetRowSpan(context)" Title="MBook Item Description" @bind-Field="@context.MBookItemDescription" Width="32%" />
    <Column Title="Description" TData="string" DataIndex="@nameof(context.Description)" Width="18%" />
    <Column Title="Uom" TData="string" DataIndex="@nameof(context.Uom)" Width="8%" />
    <Column Title="No" TData="int" DataIndex="@nameof(context.Nos)" Width="6%" />
    <Column Title="L" TData="string" Width="6%">@context.Value1.ToString("0.00")</Column>
    <Column Title="B" TData="string" Width="6%">@(context.Value2 > 0 ? context.Value2.ToString("0.00") : "")</Column>
    <Column Title="H" TData="string" Width="6%">@(context.Value3 > 0 ? context.Value3.ToString("0.00") : "")</Column>
    <Column Title="Qty" TData="string" Width="8%">@context.Total.ToString("0.00")</Column>
    <ActionColumn Title="Action" Width="10%">
        <Row Justify="center" Gutter="6">
            <AntDesign.Col>
                <Button Icon="@(IconType.Outline.Edit)"
                        Size="@ButtonSize.Small"
                        Shape="@ButtonShape.CircleOutline"
                        OnClick="_=> OpenSideDrawer(context)">
                </Button>
            </AntDesign.Col>
            <AntDesign.Col>
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> OnDeleteItem(context)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.Delete)"
                            Shape="@ButtonShape.CircleOutline"
                            Danger
                            Size="@ButtonSize.Small">
                    </Button>
                </Popconfirm>
            </AntDesign.Col>
        </Row>
    </ActionColumn>
</Table>

<AddEditMBSheetItemDrawer MBookItems="@MBookItemResponses"
                       Visible="@drawerVisible"
                       OnClose="@CloseSideBar"
                       @bind-MBSheetItem="@currentMBSheetItem"
                       OnItemSubmit="@OnItemSubmit" />

@code {
    [Parameter]
    public List<MBookItemResponse> MBookItemResponses { get; set; }

    [Parameter]
    public List<MBSheetItemRequest> ModelItems { get; set; }

    MBSheetItemRequest currentMBSheetItem = new();
    bool drawerVisible = false;
    bool isEdit = false;

    int GetRowSpan(MBSheetItemRequest currItem)
    {
        int count = ModelItems.Where(i => i.MBookItemId == currItem.MBookItemId).Count();

        if (count > 1)
        {
            int minMBSheeItemHash = ModelItems.Where(i => i.MBookItemId == currItem.MBookItemId)
                                  .Select(i => i.GetHashCode())
                                  .Min();

            return currItem.GetHashCode() == minMBSheeItemHash ? count : 0;
        }

        return 1;
    }

    void OnDeleteItem(MBSheetItemRequest item)
    {
        ModelItems.Remove(item);
    }

    void OpenSideDrawer(MBSheetItemRequest item)
    {
        if(item == null)
        {
            isEdit = false; // for adding new item
        }
        else
        {
            isEdit = true; // for editing existing item
        }

        currentMBSheetItem = item ?? new MBSheetItemRequest();
        drawerVisible = true;
    }

    void CloseSideBar()
    {
        currentMBSheetItem = new();
        drawerVisible = false;
    }

    void OnItemSubmit()
    {
        if(!isEdit)
        {
            ModelItems.Add(currentMBSheetItem);
        }

        currentMBSheetItem = new();
        SortModelItems();
    }

    void SortModelItems()
    {
        ModelItems = ModelItems.OrderBy(i => i.MBookItemId)
                .ThenBy(i => i.GetHashCode())
                .ToList();
    }
}
