<Table DataSource="@MBSheet.Items"
       PageSize="@MBSheet.Items.Count"
       Size="TableSize.Small"
       Loading="@loading"
       HidePagination Bordered>

    <ColumnDefinitions>
        <Column Title="Item" TData="string" DataIndex="@nameof(context.ShortServiceDesc)" Width="35%" />
        <Column Title="Service No" TData="int" DataIndex="@nameof(context.ServiceNo)" Width="15%" />
        <Column Title="Uom" TData="string" DataIndex="@nameof(context.Uom)" Width="15%" />
        <Column Title="Measured Quantity" TData="string" Width="15%">@context.MeasuredQuantity.ToString("0.00")</Column>
        <ActionColumn Title="Action" Width="20%">
            <Row Justify="center" Gutter="6">

                <AntDesign.Col>
                    <Button Icon="@(IconType.Outline.Upload)"
                            Size="@ButtonSize.Small"
                            Type="@ButtonType.Primary"
                            Shape="@ButtonShape.CircleOutline"
                            OnClick="_=> OpenFileUploadModal(context)">
                    </Button>
                </AntDesign.Col>

                @if (MBSheet.Status == MBSheetStatus.CREATED || MBSheet.Status == MBSheetStatus.PUBLISHED)
                {
                    <AntDesign.Col>
                        <Button Icon="@(IconType.Outline.Edit)"
                                Size="@ButtonSize.Small"
                                Shape="@ButtonShape.CircleOutline"
                                OnClick="_=> GoToEditMeasurementPage(context)">
                        </Button>
                    </AntDesign.Col>

                    <AntDesign.Col>
                        <Popconfirm Title="Sure to delete?"
                                    OnConfirm="()=> OnDeleteItem(context)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Icon="@(IconType.Outline.Delete)"
                                    Shape="@ButtonShape.CircleOutline"
                                    Danger
                                    Size="@ButtonSize.Small">
                            </Button>
                        </Popconfirm>
                    </AntDesign.Col>
                }
            </Row>
        </ActionColumn>
    </ColumnDefinitions>

    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Measurements"
               PageSize="rowData.Data.Measurements.Count"
               Size="@TableSize.Small"
               HidePagination Bordered>

            <Column Title="Description" TData="string" DataIndex="@nameof(context.Description)" Width="40%" />
            <Column Title="No" TData="int" DataIndex="@nameof(context.No)" Width="12%" />
            <Column Title="Val1" TData="string" DataIndex="@nameof(context.Val1)" Width="12%" />
            <Column Title="Val2" TData="string" DataIndex="@nameof(context.Val2)" Width="12%" />
            <Column Title="Val3" TData="string" DataIndex="@nameof(context.Val3)" Width="12%" />
            <Column Title="Total" TData="float" DataIndex="@nameof(context.Total)" Width="12%" />
        </Table>
    </ExpandTemplate>
</Table>

<FileUploadComponent @bind-Visible="modalVisible"
                     @bind-CurrentMBSheetItem="@currentMBSheetItem"
                     IsUpload="isUpload"
                     OnItemSubmit="@OnItemSubmit" />

@code {
    [Parameter]
    public MBSheetResponse MBSheet { get; set; }

    [Parameter]
    public EventCallback ReloadPage { get; set; }

    MBSheetItemResponse currentMBSheetItem;

    bool loading = false;
    bool modalVisible = false;
    bool isUpload = true;

    async Task OnDeleteItem(MBSheetItemResponse item)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheetItem(MBSheet.Id, item.Id);
        loading = false;

        if (result.Succeeded)
        {
            await ReloadPage.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnItemSubmit()
    {
        await ReloadPage.InvokeAsync();
    }

    void OpenFileUploadModal(MBSheetItemResponse item)
    {
        currentMBSheetItem = item;
        modalVisible = true;
        isUpload = (MBSheet.Status == MBSheetStatus.CREATED || MBSheet.Status == MBSheetStatus.PUBLISHED) ? true : false;
    }
    

    void GoToEditMeasurementPage(MBSheetItemResponse item)
    {
        navManager.NavigateTo($"/mbook/{MBSheet.MeasurementBookId}/mbsheet/{MBSheet.Id}/items/{item.Id}");
    }
}
