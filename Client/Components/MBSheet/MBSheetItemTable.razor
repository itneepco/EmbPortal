<Button OnClick="() => OpenSideDrawer(null)" Icon="@IconType.Outline.Plus" Style="margin-bottom: 0.5rem">
    Add Measurement
</Button>

<Table DataSource="@MBSheetItems" 
       PageSize="@MBSheetItems.Count"
       Size="TableSize.Small" 
       Loading="@loading"
       HidePagination Bordered>

    <Column RowSpan="GetRowSpan(context)" Title="MBook Item Description" @bind-Field="@context.MBookItemDescription" Width="32%" />
    <Column Title="Description" TData="string" DataIndex="@nameof(context.Description)" Width="18%" />
    <Column Title="Uom" TData="string" DataIndex="@nameof(context.Uom)" Width="8%" />
    <Column Title="No" TData="int" DataIndex="@nameof(context.Nos)" Width="6%" />
    <Column Title="L" TData="string" Width="6%">@context.Value1.ToString("0.00")</Column>
    <Column Title="B" TData="string" Width="6%">@(context.Value2 > 0 ? context.Value2.ToString("0.00") : "")</Column>
    <Column Title="H" TData="string" Width="6%">@(context.Value3 > 0 ? context.Value3.ToString("0.00") : "")</Column>
    <Column RowSpan="GetRowSpan(context)" Title="Total Qty" TData="decimal" Width="8%">
        @GetMBookItemTotalQtyInMBSheet(context.MBookItemId).ToString("0.00")
    </Column>
    <ActionColumn Title="Action" Width="10%">
        <Row Justify="center" Gutter="6">
            <AntDesign.Col>
                <Button Icon="@(IconType.Outline.Edit)"
                        Size="@ButtonSize.Small"
                        Shape="@ButtonShape.CircleOutline"
                        OnClick="_=> OpenSideDrawer(context)">
                </Button>
            </AntDesign.Col>
            <AntDesign.Col>
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> OnDeleteItem(context)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.Delete)"
                            Shape="@ButtonShape.CircleOutline"
                            Danger
                            Size="@ButtonSize.Small">
                    </Button>
                </Popconfirm>
            </AntDesign.Col>
        </Row>
    </ActionColumn>
</Table>

<AddEditMBSheetItemDrawer Visible="@drawerVisible"
                       OnClose="@CloseSideBar"
                       CurrentMBSheetItem="@currentMBSheetItem"
                       OnItemSubmit="@OnItemSubmit" />

@code {
    [CascadingParameter(Name = "MBookId")]
    public int MBookId { get; set; }

    [CascadingParameter(Name = "MBSheetId")]
    public int MBSheetId { get; set; }

    [Parameter]
    public List<MBSheetItemResponse> MBSheetItems { get; set; }

    [Parameter]
    public EventCallback ReloadPage { get; set; }

    MBSheetItemResponse currentMBSheetItem;
    bool drawerVisible = false;
    bool loading = false;

    int GetRowSpan(MBSheetItemResponse currItem)
    {
        int count = MBSheetItems.Where(i => i.MBookItemId == currItem.MBookItemId).Count();

        if (count > 1)
        {
            int minId = MBSheetItems.Where(i => i.MBookItemId == currItem.MBookItemId)
                                  .Select(i => i.Id)
                                  .Min();

            return currItem.Id == minId ? count : 0;
        }

        return 1;
    }

    async Task OnDeleteItem(MBSheetItemResponse item)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheetItem(MBSheetId, item.Id);
        loading = false;

        if (result.Succeeded)
        {
            await ReloadPage.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void OpenSideDrawer(MBSheetItemResponse item)
    {
        currentMBSheetItem = item;
        drawerVisible = true;
    }

    void CloseSideBar()
    {
        currentMBSheetItem = new();
        drawerVisible = false;
    }

    async Task OnItemSubmit()
    {
        await ReloadPage.InvokeAsync();
    }

    void SortModelItems()
    {
        MBSheetItems = MBSheetItems.OrderBy(i => i.MBookItemId)
            .ThenBy(i => i.GetHashCode())
            .ToList();
    }

    float GetMBookItemTotalQtyInMBSheet(int mBookItemId)
    {
        return MBSheetItems.Where(i => i.MBookItemId == mBookItemId)
            .Aggregate(0, (float acc, MBSheetItemResponse curr) => acc + curr.Quantity);
    }
}
