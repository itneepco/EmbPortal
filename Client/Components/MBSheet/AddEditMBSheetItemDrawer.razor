<Drawer Closable="true"
        Width="550"
        Title="@(CurrentMBSheetItem == null ?  "Add MB Sheet Item" : "Edit MB Sheet Item")"
        Visible="@Visible"
        OnClose="@CloseSidebar">

    <Form @ref="form"
          Model="@model"
          OnFinish="@OnSubmit"
          Layout="@FormLayout.Vertical"
          ValidateMode="@FormValidateMode.Complex"
          Loading="@loading">

        <FormItem Label="Select Service Item" Required Style="margin-bottom:12px">
            <Select DataSource="@mbItemsStatuses"
                    @bind-Value="@mbItemId"
                    ValueName="@nameof(MBItemStatusResponse.MBookItemId)"
                    LabelName="@nameof(MBItemStatusResponse.ItemDescription)"
                    Placeholder="Select Service Item"
                    OnSelectedItemChanged="@(item => SelectLineItem(item))"
                    AllowClear>
            </Select>
        </FormItem>

        <FormItem Label="Work Description" Style="margin-bottom:12px">
            <Input Placeholder="General Remarks" @bind-Value="@context.Description" TValue="string" />
        </FormItem>

        <Row Gutter="12">
            <AntDesign.Col Span="12">
                <FormItem Label="Uom" Style="margin-bottom:12px">
                    <Input Placeholder="Uom" @bind-Value="@context.Uom" Disabled />
                </FormItem>
            </AntDesign.Col>

            <AntDesign.Col Span="12">
                <FormItem Label="Nos" Style="margin-bottom:12px">
                    <Input Placeholder="Nos" @bind-Value="@context.Nos" TValue="int" />
                </FormItem>
            </AntDesign.Col>
        </Row>

        <Row Gutter="12">
            <AntDesign.Col Flex="1">
                <FormItem Label="Value 1" Rules=@(valueGreaterThanZero) Style="margin-bottom:12px">
                    <Input Placeholder="Value 1" @bind-Value="@context.Value1" TValue="float" />
                </FormItem>
            </AntDesign.Col>
            @if (context.Dimension > 1)
            {
                <AntDesign.Col Flex="1">
                    <FormItem Label="Value 2" Rules=@(valueGreaterThanZero) Style="margin-bottom:12px">
                        <Input Placeholder="Value 2" @bind-Value="@context.Value2" TValue="float" />
                    </FormItem>
                </AntDesign.Col>
            }

            @if (context.Dimension > 2)
            {
                <AntDesign.Col Flex="1">
                    <FormItem Label="Value 3" Rules=@(valueGreaterThanZero) Style="margin-bottom:12px">
                        <Input Placeholder="Value 3" @bind-Value="@context.Value3" TValue="float" />
                    </FormItem>
                </AntDesign.Col>
            }
        </Row>

        @if (selectedItem != null)
        {
            <Tag Color="purple-inverse">Balance Quantity: @selectedItem.AvailableMeasurementQty.ToString("0.00")</Tag>
            <Tag Color="orange-inverse">Entered Quantity: @context.Total.ToString("0.00")</Tag>
        }

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="@CloseSidebar">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

@code {
    [CascadingParameter(Name = "MBookId")]
    public int MBookId { get; set; }

    [CascadingParameter(Name = "MBSheetId")]
    public int MBSheetId { get; set; }

    [Parameter]
    public MBSheetItemResponse CurrentMBSheetItem { get; set; } = new();

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemSubmit { get; set; }

    public MBSheetItemRequest model { get; set; } = new();

    private AntDesign.Form<MBSheetItemRequest> form;

    private List<MBItemStatusResponse> mbItemsStatuses = new();
    private MBItemStatusResponse selectedItem;

    private int mbItemId; // for binding with select input field
    private bool loading = false;

    private FormValidationRule[] valueGreaterThanZero = new FormValidationRule[]{
        new FormValidationRule { Type=FormFieldType.Float, Min=(decimal)0.001, Message="Value should be atleast 0.001" }
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Visible) // fetch MB Item status only when drawer is visible
        {
            await LoadCurrentMBookItemsStatusAsync();
        }

        model = new();

        if (CurrentMBSheetItem != null)
        {
            mbItemId = CurrentMBSheetItem.MBookItemId;

            model.Description = CurrentMBSheetItem.Description;
            model.Dimension = CurrentMBSheetItem.Dimension;
            model.Nos = CurrentMBSheetItem.Nos;
            model.Value1 = CurrentMBSheetItem.Value1;
            model.Value2 = CurrentMBSheetItem.Value2;
            model.Value3 = CurrentMBSheetItem.Value3;

            // Remove current line item quantity from the cumulative measure quantity
            var mbItemStatus = mbItemsStatuses.Find(p => p.MBookItemId == CurrentMBSheetItem.MBookItemId);
            if(mbItemStatus != null)
            {
                mbItemStatus.CumulativeMeasuredQty -= CurrentMBSheetItem.Quantity;
            }
        }
    }

    async Task LoadCurrentMBookItemsStatusAsync()
    {
        loading = true;
        mbItemsStatuses = await mBookService.GetCurrentMBItemsStatus(MBookId);
        loading = false;
    }

    async Task OnSubmit()
    {
        if (selectedItem == null) return;

        if(model.Total > selectedItem.AvailableMeasurementQty)
        {
            await messageService.Error($"Entered quantity should be less or equal to {selectedItem.AvailableMeasurementQty}");
            return;
        }


        loading = true;
        dynamic result;
        if (CurrentMBSheetItem == null)
        {
            result = await mbSheetService.CreateMBSheetItem(MBSheetId, model);
        }
        else
        {
            result = await mbSheetService.UpdateMBSheetItem(MBSheetId, CurrentMBSheetItem.Id, model);
        }
        loading = false;

        if (result.Succeeded)
        {
            CloseSidebar();
            await OnItemSubmit.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void CloseSidebar()
    {
        mbItemId = 0;
        OnClose.InvokeAsync();
    }

    void SelectLineItem(MBItemStatusResponse item)
    {
        selectedItem = item;

        if (item == null)
        {
            model.Dimension = 0;
            model.MBookItemDescription = null;
            model.MBookItemId = 0;
            model.Uom = null;
        }
        else
        {
            model.Dimension = item.Dimension;
            model.MBookItemDescription = item.ItemDescription;
            model.MBookItemId = item.MBookItemId;
            model.Uom = item.Uom;
        }
    }
}
