<Drawer Closable="true"
        Width="550"
        Title="@title"
        Visible="@Visible"
        OnClose="@CloseSidebar">

    <Form @ref="form"
          Model="@MBSheetItem"
          OnFinish="@OnSubmit"
          Layout="@FormLayout.Vertical"
          ValidateMode="@FormValidateMode.Complex"
          Loading="@loading">

        <FormItem Label="Select Measurement Book Line Item" Required>
            <Select DataSource="@MBookItems"
                    @bind-Value="@lineItemId"
                    ValueName="@nameof(MBookItemResponse.Id)"
                    LabelName="@nameof(MBookItemResponse.Description)"
                    Placeholder="Select Measurement Book Item"
                    OnSelectedItemChanged="@(item => SelectLineItem(item))"
                    AllowClear>
            </Select>
        </FormItem>

        <FormItem Label="Work Description">
            <Input Placeholder="General Remarks" @bind-Value="@context.Description" TValue="string" />
        </FormItem>

        <Row Gutter="12">
            <AntDesign.Col Span="12">
                <FormItem Label="Uom">
                    <Input Placeholder="Uom" @bind-Value="@context.Uom" Disabled />
                </FormItem>
            </AntDesign.Col>

            <AntDesign.Col Span="12">
                <FormItem Label="Nos">
                    <Input Placeholder="Nos" @bind-Value="@context.Nos" TValue="int" />
                </FormItem>
            </AntDesign.Col>
        </Row>

        <Row Gutter="12">
            <AntDesign.Col Flex="1">
                <FormItem Label="Value 1" Rules=@(valueGreaterThanZero)>
                    <Input Placeholder="Value 1" @bind-Value="@context.Value1" TValue="float" />
                </FormItem>
            </AntDesign.Col>
            @if (context.Dimension > 1)
            {
                <AntDesign.Col Flex="1">
                    <FormItem Label="Value 2" Rules=@(valueGreaterThanZero)>
                        <Input Placeholder="Value 2" @bind-Value="@context.Value2" TValue="float" />
                    </FormItem>
                </AntDesign.Col>
            }

            @if (context.Dimension > 2)
            {
                <AntDesign.Col Flex="1">
                    <FormItem Label="Value 3" Rules=@(valueGreaterThanZero)>
                        <Input Placeholder="Value 3" @bind-Value="@context.Value3" TValue="float" />
                    </FormItem>
                </AntDesign.Col>
            }
        </Row>

        @if (selectedItem != null)
        {
            <Tag Color="purple-inverse">Balance Quantity: @selectedItem.BalanceQuantity.ToString("0.00")</Tag>
            <Tag Color="orange-inverse">Entered Quantity: @context.Total.ToString("0.00")</Tag>
        }

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="@CloseSidebar">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

@code {
    [Parameter]
    public MBSheetItemRequest MBSheetItem { get; set; } = new();

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<MBSheetItemRequest> MBSheetItemChanged { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemSubmit { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBookItems { get; set; }

    private AntDesign.Form<MBSheetItemRequest> form;

    private MBookItemResponse selectedItem;
    private int lineItemId;
    private bool loading = false;
    private string title = "Add / Edit MB Sheet Item";

    private FormValidationRule[] valueGreaterThanZero = new FormValidationRule[]{
        new FormValidationRule { Type=FormFieldType.Float, Min=(decimal)0.001, Message="Value should be atleast 0.001" }
    };

    protected override void OnParametersSet()
    {
        lineItemId = MBSheetItem.MBookItemId;
    }

    async Task OnSubmit()
    {
        if (selectedItem == null) return;

        if(MBSheetItem.Total > selectedItem.BalanceQuantity)
        {
            await messageService.Error($"Entered quantity should be less or equal to {selectedItem.BalanceQuantity}");
            return;
        }

        await MBSheetItemChanged.InvokeAsync(MBSheetItem);
        await OnItemSubmit.InvokeAsync();
        CloseSidebar();
    }

    void CloseSidebar()
    {
        lineItemId = 0;
        OnClose.InvokeAsync();
    }

    void SelectLineItem(MBookItemResponse item)
    {
        selectedItem = item;

        if (item == null)
        {
            MBSheetItem.Dimension = 0;
            MBSheetItem.MBookItemDescription = null;
            MBSheetItem.MBookItemId = 0;
            MBSheetItem.Uom = null;
        }
        else
        {
            MBSheetItem.Dimension = item.Dimension;
            MBSheetItem.MBookItemDescription = item.Description;
            MBSheetItem.MBookItemId = item.Id;
            MBSheetItem.Uom = item.Uom;
        }
    }
}
