<Button OnClick="() => AddEditMBSheet()" 
        Icon="@IconType.Outline.Plus" 
        Type="@ButtonType.Primary" 
        style="margin-bottom: 0.5rem;">
    Add MB Sheet
</Button>

<Table Loading="@loading" TItem="MBSheetResponse" Size="@TableSize.Small" DataSource="@mbSheets" HidePagination Bordered>
    <RowTemplate>
        <Column Title="MB Sheet Title" @bind-Field="@context.Title" Width="40%" />
        <Column Title="Measurement Date" Format="dd-MM-yyyy" @bind-Field="@context.MeasurementDate" Width="10%" />
        <Column Title="Measuring Officer" @bind-Field="@context.MeasurementOfficer" Width="10%" />
        <Column Title="Validating Officer" @bind-Field="@context.ValidationOfficer" Width="10%" />
        <Column @bind-Field="@context.Status" Width="10%">
            @if (context.Status == MBSheetStatus.ACCEPTED.ToString())
            {
                <Tag Color="gold">@context.Status</Tag>
            }
            else if (context.Status == MBSheetStatus.VALIDATED.ToString())
            {
                <Tag Color="blue">@context.Status</Tag>
            }
            else
            {
                <Tag Color="green">@context.Status</Tag>
            }
        </Column>
        <ActionColumn Title="Action" Width="20%">
            @if (context.Status == MBSheetStatus.CREATED.ToString())
            {
                @if (employeeCode == context.MeasurementOfficer)
                {
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> DeleteMBSheet(context.Id)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Loading="@loading" Danger>Delete</Button>
                    </Popconfirm>
                }
            }
            @if (context.Status == MBSheetStatus.CREATED.ToString() && employeeCode == context.ValidationOfficer)
            {
                <Popconfirm Title="Sure to Validate MB Sheet?"
                            OnConfirm="()=> ValidateMBSheet(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Validate</Button>
                </Popconfirm>
            }
            @if (context.Status == MBSheetStatus.VALIDATED.ToString() && employeeCode == context.AcceptingOfficer)
            {
                <Popconfirm Title="Sure to Accept MB Sheet?"
                            OnConfirm="()=> AcceptMBSheet(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Accept</Button>
                </Popconfirm>
            }

        </ActionColumn>
    </RowTemplate>

    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Items" HidePagination Bordered>
            <Column RowSpan="GetRowSpan(context, rowData.Data.Items)" Title="MBook Item Description" @bind-Field="@context.MBookItemDescription" Width="35%" />
            <Column Title="Description" TData="string" DataIndex="@nameof(context.Description)" Width="20%" />
            <Column Title="Uom" TData="string" DataIndex="@nameof(context.Uom)" Width="8%" />
            <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" Width="8%" />
            <Column Title="No" TData="decimal" DataIndex="@nameof(context.Nos)" Width="5%" />
            <Column Title="L" TData="decimal" Width="5%">@context.Value1</Column>
            <Column Title="B" TData="decimal" Width="5%">@(context.Value2 > 0 ? context.Value2 : "")</Column>
            <Column Title="H" TData="decimal" Width="5%">@(context.Value3 > 0 ? context.Value3 : "")</Column>
            <Column Title="Quantity" TData="float" DataIndex="@nameof(context.TotalQuantity)" Width="9%" />
        </Table>
    </ExpandTemplate>
</Table>

@code {
    [Parameter]
    public int MBookId { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBItems { get; set; }

    string employeeCode;
    List<MBSheetResponse> mbSheets = new();
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        employeeCode = state.User.GetEmployeeCodeFromClaimsPrincipal();

        await LoadMBSheets();
    }

    async Task LoadMBSheets()
    {
        loading = true;
        mbSheets = await mbSheetService.GetMBSheetsByMBookId(MBookId);
        foreach (var mbSheet in mbSheets)
        {
            mbSheet.Items = mbSheet.Items
                .OrderBy(p => p.MBookItemId)
                .ThenBy(i => i.Id)
                .ToList();
        }
        loading = false;
    }

    async Task DeleteMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            mbSheets = mbSheets.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task ValidateMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.ValidateMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task AcceptMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.AcceptMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void AddEditMBSheet()
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet");
    }

    int GetRowSpan(MBSheetItemResponse currItem, List<MBSheetItemResponse> items)
    {
        int count = items.Where(i => i.MBookItemId == currItem.MBookItemId).Count();

        if(count > 1)
        {
            int minMBSheeItemId = items.Where(i => i.MBookItemId == currItem.MBookItemId)
                                  .Select(i => i.Id)
                                  .Min();

            return currItem.Id == minMBSheeItemId ? count : 0;
        }
        else
        {
            return 1;
        }
    }
}

