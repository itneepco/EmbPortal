<Button OnClick="() => GoToAddPage()"
        Icon="@IconType.Outline.Plus"
        Type="@ButtonType.Primary"
        style="margin-bottom: 0.5rem;">
    Add MB Sheet
</Button>

<Table Loading="@loading"
       TItem="MBSheetInfoResponse"
       Size="@TableSize.Small"
       DataSource="@mbSheets"
       ScrollX="1000"
       Bordered>

    <Column Title="MB Sheet Title" @bind-Field="@context.Title" Width="38%" />
    <Column Title="Measured On" Format="dd-MM-yyyy" @bind-Field="@context.MeasurementDate" Width="12%" />
    <Column Title="Measurer" TData="string" Width="15%">
        @context.MeasurerName
    </Column>
    <Column Title="Validator" TData="string" Width="15%">
        @context.ValidatorName
    </Column>
    <Column @bind-Field="@context.Status" Width="10%">
        @if (context.Status == MBSheetStatus.ACCEPTED.ToString())
        {
            <Tag Color="gold">@context.Status</Tag>
        }
        else if (context.Status == MBSheetStatus.VALIDATED.ToString())
        {
            <Tag Color="blue">@context.Status</Tag>
        }
        else
        {
            <Tag Color="green">@context.Status</Tag>
        }
    </Column>
    <ActionColumn Title="Action" Width="10%">
        <Row Justify="ceter">
            @if (context.Status == MBSheetStatus.CREATED.ToString())
            {
                <Button OnClick="() => GoToEditPage(context.Id)" Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" Style="margin-right: 0.2rem" />

                <Popconfirm Title="Sure to delete?"
                        OnConfirm="()=> DeleteMBSheet(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                    <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Loading="@loading" Danger Style="margin-right: 0.2rem" />
                    </Popconfirm>

                @*@if (employeeCode == context.MeasurerEmpCode && context.Items.Count() > 0)
                {
                    <Popconfirm Title="Sure to publish?"
                        OnConfirm="()=> PublishMBSheet(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                        <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small">Publish</Button>
                    </Popconfirm>
                }*@
            }
            @*@if (context.Status == MBSheetStatus.PUBLISHED.ToString() && employeeCode == context.ValidatorEmpCode && context.Items.Count() > 0)
            {
                <Popconfirm Title="Sure to Validate MB Sheet?"
                        OnConfirm="()=> ValidateMBSheet(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Validate</Button>
                </Popconfirm>
            }*@
            @if (context.Status == MBSheetStatus.VALIDATED.ToString() && employeeCode == context.EicEmpcode)
            {
                <Popconfirm Title="Sure to Accept MB Sheet?"
                        OnConfirm="()=> AcceptMBSheet(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small" style="margin-left: 0.15rem">Accept</Button>
                </Popconfirm>
            }
        </Row>
    </ActionColumn>
</Table>

<FileUploadComponent @bind-Visible="modalVisible"
                     CurrentMBSheetItem="@currentMBSheetItem" />

@code {
    [Parameter]
    public int MBookId { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBItems { get; set; }

    string employeeCode;
    List<MBSheetInfoResponse> mbSheets = new();
    bool loading = false;

    MBSheetItemResponse currentMBSheetItem;
    bool modalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        employeeCode = state.User.GetEmployeeCodeFromClaimsPrincipal();

        await LoadMBSheets();
    }

    async Task LoadMBSheets()
    {
        loading = true;
        mbSheets = await mbSheetService.GetMBSheetsByMBookId(MBookId);
        mbSheets = mbSheets.OrderByDescending(p => p.MeasurementDate).ToList();
        loading = false;
    }

    async Task DeleteMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.DeleteMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            mbSheets = mbSheets.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task PublishMBSheet(int id)
    {

        loading = true;
        var result = await mbSheetService.PublishMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task ValidateMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.ValidateMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task AcceptMBSheet(int id)
    {
        loading = true;
        var result = await mbSheetService.AcceptMBSheet(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMBSheets();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void OpenFileUploadModal(MBSheetItemResponse item)
    {
        currentMBSheetItem = item;
        modalVisible = true;
    }

    void GoToAddPage()
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet");
    }

    void GoToEditPage(int mbSheetId)
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet/{mbSheetId}");
    }

    private int GetRowSpan(MBSheetItemResponse currItem, List<MBSheetItemResponse> items)
    {
        int count = items.Where(i => i.MBookItemId == currItem.MBookItemId).Count();

        if (count > 1)
        {
            int minMBSheeItemId = items.Where(i => i.MBookItemId == currItem.MBookItemId)
                                  .Select(i => i.Id)
                                  .Min();

            return currItem.Id == minMBSheeItemId ? count : 0;
        }

        return 1;
    }

    private float GetMBookItemTotalQtyInMBSheet(int mBookItemId, List<MBSheetItemResponse> items)
    {
        return items.Where(i => i.MBookItemId == mBookItemId)
            .Aggregate(0, (float acc, MBSheetItemResponse curr) => acc + curr.MeasuredQuantity);
    }
}

