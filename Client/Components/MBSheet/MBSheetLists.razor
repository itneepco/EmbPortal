<Button OnClick="() => GoToAddPage()"
        Icon="@IconType.Outline.Plus"
        Type="@ButtonType.Primary"
        style="margin-bottom: 0.5rem;">
    Add MB Sheet
</Button>

<Table Loading="@loading"
       TItem="MBSheetInfoResponse"
       Size="@TableSize.Small"
       DataSource="@mbSheets"
       ScrollX="1000"
       Bordered>

    <Column Title="MB Sheet Title" @bind-Field="@context.Title" Width="38%" />
    <Column Title="Measured On" Format="dd-MM-yyyy" @bind-Field="@context.MeasurementDate" Width="12%" />
    <Column Title="Measurer" TData="string" Width="15%">
        @context.MeasurerName
    </Column>
    <Column Title="Validator" TData="string" Width="15%">
        @context.ValidatorName
    </Column>
    <Column @bind-Field="@context.Status" Width="10%">
        @if (context.Status == MBSheetStatus.ACCEPTED.ToString())
        {
            <Tag Color="gold">@context.Status</Tag>
        }
        else if (context.Status == MBSheetStatus.VALIDATED.ToString())
        {
            <Tag Color="blue">@context.Status</Tag>
        }
        else
        {
            <Tag Color="green">@context.Status</Tag>
        }
    </Column>
    <ActionColumn Title="Action" Width="10%">
        <Row Justify="ceter">
            <Button OnClick="() => GoToDetailPage(context.Id)"
                    Icon="@(IconType.Outline.Api)"
                    Type="@ButtonType.Primary"
                    Size="@ButtonSize.Small"
                    Style="margin-right: 0.2rem" />
        </Row>
    </ActionColumn>
</Table>

<FileUploadComponent @bind-Visible="modalVisible"
                     CurrentMBSheetItem="@currentMBSheetItem" />

@code {
    [Parameter]
    public int MBookId { get; set; }

    [Parameter]
    public List<MBookItemResponse> MBItems { get; set; }

    List<MBSheetInfoResponse> mbSheets = new();
    bool loading = false;

    MBSheetItemResponse currentMBSheetItem;
    bool modalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMBSheets();
    }

    async Task LoadMBSheets()
    {
        loading = true;
        mbSheets = await mbSheetService.GetMBSheetsByMBookId(MBookId);
        mbSheets = mbSheets.OrderByDescending(p => p.MeasurementDate).ToList();
        loading = false;
    }

    void GoToAddPage()
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet");
    }

    void GoToDetailPage(int mbSheetId)
    {
        navManager.NavigateTo($"/mbook/{MBookId}/mbsheet/{mbSheetId}");
    }
}

