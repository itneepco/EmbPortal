<Table DataSource="@Items" TItem="MBSheetItemRequest" Size="TableSize.Small" Bordered TableLayout="fixed" HidePagination>
    <ChildContent Context="data">
        <Column TData="string" Title="Description" Width="40%">@data.Description</Column>
        <Column TData="string" Title="Uom" Width="8%">@data.Uom</Column>

        <Column TData="string" Title="Value1" Width="10%">
            @if (editCache[data.MBookItemId].edit)
            {
            <Input @bind-Value="editCache[data.MBookItemId].data.Value1" />
            }
            else
            {
            @data.Value1
            }
        </Column>
        <Column TData="string" Title="Value2" Width="10%">
            @if (editCache[data.MBookItemId].edit && data.Dimension > 1)
            {
            <Input @bind-Value="editCache[data.MBookItemId].data.Value2" />
            }
            else
            {
            @(data.Dimension == 1 ? "-" : data.Value2)
            }
        </Column>
        <Column TData="string" Title="Value3" Width="10%">
            @if (editCache[data.MBookItemId].edit && data.Dimension > 2)
            {
            <Input @bind-Value="editCache[data.MBookItemId].data.Value3" />
            }
            else
            {
            @((data.Dimension == 1 || data.Dimension == 2) ? "-" : data.Value3)
            }
        </Column>

        <Column TData="float" Title="Total" Width="10%">@data.Total</Column>

        <ActionColumn Title="Action" Width="12%">
            @if (!editCache[data.MBookItemId].edit)
            {
            <a @onclick="() => startEdit(data.MBookItemId)">Edit</a>
            }
            else
            {
            <a @onclick="() => saveEdit(data.MBookItemId)" class="save">Save</a>
            <Popconfirm Title="Sure to cancel?"
                        OnConfirm="() => cancelEdit(data.MBookItemId)"
                        OkText="Yes"
                        CancelText="No">
                <a>Cancel</a>
            </Popconfirm>
            }
        </ActionColumn>
    </ChildContent>
</Table>

@code {
    [Parameter]
    public List<MBSheetItemRequest> Items { get; set; }

    IDictionary<int, (bool edit, MBSheetItemRequest data)> editCache = new Dictionary<int, (bool edit, MBSheetItemRequest data)>();

    protected override void OnParametersSet()
    {
        Items.ForEach(item =>
        {
            editCache[item.MBookItemId] = (false, item);
        });
    }

    void startEdit(int id)
    {
        var cache = editCache[id];
        editCache[id] = (true, cache.data); // add a copy in cache
    }

    void cancelEdit(int id)
    {
        var data = Items.FirstOrDefault(item => item.MBookItemId == id);
        editCache[id] = (false, data); // recovery
    }

    async Task saveEdit(int id)
    {
        bool valid = false;
        switch(editCache[id].data.Dimension)
        {
            case 1:
                var data = editCache[id].data;
                valid = data.Value1 > 0 ? true : false;
                break;
            case 2:
                data = editCache[id].data;
                valid = (data.Value1 > 0 && data.Value2 > 0) ? true : false;
                break;
            case 3:
                data = editCache[id].data;
                valid = (data.Value1 > 0 && data.Value2 > 0 && data.Value3 > 0) ? true : false;
                break;
            default:
                return;
        }

        if(!valid)
        {
            await messageService.Error("Please enter value greater than 0 for the line item");
            return;
        }

        var index = Items.FindIndex(item => item.MBookItemId == id);
        Items[index] = editCache[id].data; // apply the copy to data source
        editCache[id] = (false, Items[index]); // don't affect rows in editing
    }
}
