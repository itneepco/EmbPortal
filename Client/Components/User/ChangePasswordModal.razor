<Drawer Closable="true"
        Width="500"
        Title="@("Change Password")"
        Visible="@Visible"
        OnClose="@CloseDrawer">

    <Form Model="@model" OnFinish="OnSubmit" Layout="@FormLayout.Vertical" Loading="loading" @ref="formRef">
        <FormItem Label="Current Password">
            <Input Placeholder="Current Password" @bind-Value="@context.CurrentPassword" TValue="string" Type="password" />
        </FormItem>

        <FormItem Label="Password">
            <Input Placeholder="New Password" @bind-Value="@context.Password" TValue="string" Type="password" />
        </FormItem>

        <FormItem Label="Confirm Password">
            <Input Placeholder="Confirm New Password" @bind-Value="@context.ConfirmPassword" TValue="string" Type="password" />
        </FormItem>

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="CloseDrawer" Loading="loading">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

@code {
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    bool loading;
    ChangePasswordRequest model = new();
    Form<ChangePasswordRequest> formRef;

    private async Task OnSubmit()
    {
        if (!formRef.Validate()) return;

        var currentUser = (await stateProvider.GetAuthenticationStateAsync()).User;
        var userId = currentUser.GetEmployeeCodeFromClaimsPrincipal();

        loading = true;
        var result = await userService.ResetSelfPassword(userId, model);
        loading = false;

        if (result.Succeeded)
        {
            CloseDrawer();
            await messageService.Success("Password changed! you will be logged out. Please login with the new password.");           
            await authService.Logout();
        }
        else
        {
            await messageService.Error(result.Message);
            foreach (var error in result.Errors)
            {
                await messageService.Error(error);
            }
        }
    }

    private void CloseDrawer()
    {
        formRef.Reset();
        OnClose.InvokeAsync();
    }
}