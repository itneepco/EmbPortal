@inject MessageService messageService
@inject IUomService uomService

<Drawer Closable="true"
        Width="550"
        Title="@(CurrentUom == null ?  "Add Uom" : "Edit Uom")"
        Visible="@Visible"
        OnClose="@Close">

    <Form Model="@model" OnFinish="@OnSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
        <FormItem Label="Name">
            <Input @bind-Value="@context.Name" TValue="string" />
        </FormItem>

        <FormItem Label="Description">
            <Input @bind-Value="@context.Description" TValue="string" />
        </FormItem>

        <FormItem Label="Dimension">
            <Select DataSource="@dimensions"
                    @bind-Value="@context.Dimension"
                    ValueName="@nameof(UomDimensionResponse.Id)"
                    LabelName="@nameof(UomDimensionResponse.Name)"
                    Placeholder="Select uom"
                    AllowClear>
            </Select>
        </FormItem>

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="Close">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

@code{
    [Parameter]
    public UomResponse CurrentUom { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemUpdate { get; set; }

    List<UomDimensionResponse> dimensions = new();
    UomRequest model = new();
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUomDimensions();
    }

    protected override void OnParametersSet()
    {
        if (CurrentUom != null)
        {
            // for editing existing line item
            model.Name = CurrentUom.Name;
            model.Description = CurrentUom.Description;
            model.Dimension = CurrentUom.DimensionId;
        }
        else
        {
            model = new();
        }
    }

    async Task LoadUomDimensions()
    {
        dimensions = await uomService.GetUomDimensions();
    }

    async Task OnSubmit()
    {
        loading = true;
        dynamic result;
        if (CurrentUom == null)
        {
            result = await uomService.CreateUom(model);
        }
        else
        {
            result = await uomService.UpdateUom(CurrentUom.Id, model);
        }
        loading = false;

        if (result.Succeeded)
        {
            Close();
            await OnItemUpdate.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void Close()
    {
        OnClose.InvokeAsync();
    }
}