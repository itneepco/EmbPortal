<Row Style="margin-bottom: 0.75rem">
    <Space>
        <SpaceItem>
            <Button OnClick="() => GoToAddPage()"
                    Icon="@IconType.Outline.Plus"
                    Type="@ButtonType.Primary"
                    Disabled="@raBills.Any(p => p.Status == RABillStatus.CREATED || p.Status == RABillStatus.REVOKED)">
                Add RA Bill
            </Button>
        </SpaceItem>
        @if (selectedRows != null && selectedRows.Count() > 0)
        {
            @if (selectedRows.First()?.Status != RABillStatus.APPROVED)
            {
                <SpaceItem>
                    <Button Icon="@(IconType.Outline.Edit)" OnClick="() => GoToEditPage(selectedRows.First().Id)">Edit</Button>
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm Title="Are you sure delete this order?"
                                Placement="@Placement.Bottom"
                                OnConfirm="@(() => DeleteRABill(selectedRows.First().Id))"
                                OkText="Yes"
                                CancelText="No">
                        <Button Danger Icon="@IconType.Outline.Delete" Loading="@loading">Delete</Button>
                    </Popconfirm>
                </SpaceItem>
            }
            <SpaceItem>
                <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Read" OnClick="() => ViewDetail(selectedRows.First().Id)">Details</Button>
            </SpaceItem>

            @if (selectedRows.First()?.Status == RABillStatus.APPROVED && selectedRows.First()?.Id == latestRaBillId && employeeCode == selectedRows.First().AcceptingOfficer)
            {
                <SpaceItem>
                    <Popconfirm Title="Sure to Revoke RA Bill Status?"
                                OnConfirm="()=> RevokeRABill(selectedRows.First().Id)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Danger Icon="@IconType.Outline.CarryOut" Loading="@loading">Revoke</Button>
                    </Popconfirm>
                </SpaceItem>
            }
        }
    </Space>
</Row>

<Table Loading="@loading"
       TItem="RABillResponse"
       Size="@TableSize.Small"
       @bind-SelectedRows="selectedRows"
       DataSource="@raBills">

    <RowTemplate>
        <Selection Key="@context.Id.ToString()" Type="radio" Width="5%" />
        <Column Title="RA Bill Title" TData="string" DataIndex="@nameof(context.Title)" />
        <Column Title="Accepting Officer" TData="string" DataIndex="@nameof(context.AcceptingOfficer)" Width="15%" />
        <Column Title="Bill Date" Format="dd-MM-yyyy" @bind-Field="@context.BillDate" Width="10%" />
        <Column @bind-Field="@context.Status" Width="10%">
            @if (context.Status == RABillStatus.APPROVED)
            {
                <Tag Color="gold">@context.Status</Tag>
            }
            else if (context.Status == RABillStatus.REVOKED)
            {
                <Tag Color="blue">@context.Status</Tag>
            }
            else
            {
                <Tag Color="green">@context.Status</Tag>
            }
        </Column>
    </RowTemplate>
</Table>

@code {
    [Parameter]
    public int MBookId { get; set; }

    List<RABillResponse> raBills = new();
    bool loading = false;
    int latestRaBillId => raBills.Select(p => p.Id).Max();

    IEnumerable<RABillResponse> selectedRows;
    string employeeCode;

    protected override async Task OnInitializedAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        employeeCode = state.User.GetEmployeeCodeFromClaimsPrincipal();

        await LoadRABills();
    }

    async Task LoadRABills()
    {
        loading = true;
        raBills = await raBillService.GetRABillsByMBookId(MBookId);
        raBills = raBills.OrderByDescending(p => p.BillDate).ToList();
        loading = false;
    }

    async Task DeleteRABill(int id)
    {
        loading = true;
        var result = await raBillService.DeleteRABill(id);
        loading = false;

        if (result.Succeeded)
        {
            raBills = raBills.Where(item => item.Id != id).ToList();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
        StateHasChanged();
    }

    async Task RevokeRABill(int id)
    {
        loading = true;
        var result = await raBillService.RevokeRABill(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadRABills();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
        StateHasChanged();
    }

    void GoToAddPage()
    {
        navManager.NavigateTo($"/mbook/{MBookId}/rabill");
    }

    void GoToEditPage(int raBillId)
    {
        navManager.NavigateTo($"/mbook/{MBookId}/rabill/{raBillId}");
    }

    void ViewDetail(int id)
    {
        navManager.NavigateTo($"/mbook/{MBookId}/rabill/{id}/details");
    }
}
