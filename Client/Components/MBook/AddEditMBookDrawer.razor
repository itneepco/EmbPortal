@inject IWorkOrderService workOrderService
@inject IMBookService mBookService
@inject MessageService messageService
@inject MessageService messageService

<Drawer Closable="true" Width="720" 
        Visible="@Visible" OnClose="@Close"
        Title="@(MBook == null ?  "Add Item" : "Edit Item")">

    <Spin Spinning="loading">
        <Form @ref="form" Model="@model" Layout="@FormLayout.Vertical">
            <Row Gutter="16">
                <AntDesign.Col Span="10">
                    <FormItem Label="Title">
                        <Input Placeholder="Measurement Book Name" @bind-Value="@context.Title" TValue="string" AutoFocus />
                    </FormItem>
                </AntDesign.Col>

                <AntDesign.Col Span="7">
                    <FormItem Label="Measurement Officer">
                        <Input TValue="string" @bind-Value="@context.MeasurementOfficer" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="7">
                    <FormItem Label="Validating Officer">
                        <Input TValue="string" @bind-Value="@context.ValidatingOfficer" />
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>

        <Divider Orientation="left" Plain>Select Line Items</Divider>

        <Table DataSource="@pendingItems" @bind-SelectedRows="selectedRows" Size="TableSize.Small" HidePagination>
            <Selection Key="@context.ItemId.ToString()" Disabled="@(!context.IsPending)" />
            <Column Title="Line Item Description" @bind-Field="@context.Description"></Column>
        </Table>

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1" />
            <AntDesign.Col>
                <Button OnClick="@Close">Cancel</Button>
                <Button OnClick="@Submit" Type="@ButtonType.Primary">Submit</Button>
            </AntDesign.Col>
        </Row>
    </Spin>
</Drawer>


@code{
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    [Parameter]
    public MeasurementBookResponse MBook { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Form<CreateMBookRequest> form;

    CreateMBookRequest model { get; set; }

    List<PendingOrderItemResponse> pendingItems = new();

    IEnumerable<PendingOrderItemResponse> selectedRows;

    bool loading = false;

    protected override async Task OnParametersSetAsync()
    {
        model = new();
        model.WorkOrderId = WorkOrderId;
        model.Items = new List<MBookItemRequest>();

        if (MBook != null)
        {
            model.Title = MBook.Title;
            model.ValidatingOfficer = MBook.ValidatingOfficer;
            model.MeasurementOfficer = MBook.MeasurementOfficer;
            model.Items = MBook.Items.Select(item => new MBookItemRequest
            {
                WorkOrderItemId = item.WorkOrderItemId
            }).ToList();
        }

        await LoadPendingOrderItemsAsync();
    }

    async Task LoadPendingOrderItemsAsync()
    {
        loading = true;
        var result = await workOrderService.GetPendingWorkOrderItems(WorkOrderId);

        if (result.Succeeded)
        {
            pendingItems = result.Data;
        }
        loading = false;
    }

    async Task Submit()
    {
        if (!form.Validate()) return;

        if (selectedRows == null)
        {
            await messageService.Warning("Please select atleast one line item");
            return;
        }

        foreach (var item in selectedRows)
        {
            model.Items.Add(new MBookItemRequest
            {
                WorkOrderItemId = item.ItemId
            });
        }

        loading = true;
        var result = await mBookService.CreateMeasurementBook(model);
        loading = false;

        if (result.Succeeded)
        {
            Close();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void Close()
    {
        OnClose.InvokeAsync();
        form.ValidationReset();
        pendingItems.Clear();
    }
}