<Drawer Closable="true" Width="700"
        Visible="@Visible" OnClose="@Close"
        Title="@(MBook == null ?  "Add Item" : "Edit Item")">

    <Spin Spinning="loading">
        <Form @ref="form" Model="@model" Layout="@FormLayout.Vertical">
            <Row Gutter="16">                
                
                <AntDesign.Col Span="12">
                    <FormItem Label="Validating Officer">
                        <Select DataSource="@users"
                            Style="width: 100%"
                            @bind-Value="@context.ValidatingOfficer"
                            ValueName="@nameof(UserResponse.EmployeeCode)"
                            LabelName="@nameof(UserResponse.LongName)"
                            Placeholder="Select Validating Officer"
                            AllowClear>
                        </Select>
                    </FormItem>
                </AntDesign.Col>

                <AntDesign.Col Span="12">
                    <FormItem Label="Measurement Officer">
                        <Select DataSource="@users"
                            Style="width: 100%"
                            @bind-Value="@context.MeasurementOfficer"
                            ValueName="@nameof(UserResponse.EmployeeCode)"
                            LabelName="@nameof(UserResponse.LongName)"
                            Placeholder="Select Measurement Officer"
                            AllowClear>
                        </Select>
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>

        <Select DataSource="@lineItems"
                @bind-Value="@selectedItemNo"
                Placeholder="Please select line item"
                ValueName="@nameof(LineItem.ItemNo)"
                LabelName="@nameof(LineItem.ItemDescription)"
                Style="margin-bottom: 1rem; width: 100%">
        </Select>

        <Table @ref="table"
               DataSource="@pendingItems.Where(p => p.ItemNo == selectedItemNo)"
               PageSize="@pendingItems.Where(p => p.ItemNo == selectedItemNo).Count()"
               @bind-SelectedRows="selectedRows"
               Size="TableSize.Small"
               Bordered
               HidePagination>
            <Selection Key="@context.WorkOrderItemId.ToString()" Width="10%" />
            <Column Title="Service No" @bind-Field="@context.ServiceNo" Width="30%"></Column>
            <Column Title="Service Description" @bind-Field="@context.ShortServiceDesc" Width="70%"></Column>
        </Table>

        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1" />
            <AntDesign.Col>
                <Button OnClick="@Close">Cancel</Button>
                <Button OnClick="@Submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Spin>
</Drawer>


@code {
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    [Parameter]
    public MBookResponse MBook { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemUpdate { get; set; }

    ITable table;
    Form<MBookRequest> form;

    MBookRequest model { get; set; } = new();

    List<PendingOrderItemResponse> pendingItems = new();
    List<LineItem> lineItems = new();
    List<UserResponse> users = new();

    int selectedItemNo;
    bool loading = false;
    IEnumerable<PendingOrderItemResponse> selectedRows;

    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllUsers();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!Visible) return;

        await LoadPendingOrderItemsAsync();

        model = new();
        model.WorkOrderId = WorkOrderId;
        model.Items = new List<MBookItemRequest>();

        if (MBook != null)
        {
            model.ValidatingOfficer = MBook.ValidatorEmpCode;
            model.MeasurementOfficer = MBook.MeasurerEmpCode;

            // Add existing MBook items to pending OrderItem list
            var existingItems = new List<PendingOrderItemResponse>();
            foreach (var mBookitem in MBook.Items)
            {
                var item = new PendingOrderItemResponse
                    {
                        WorkOrderItemId = mBookitem.WorkOrderItemId,
                        ItemNo = mBookitem.ItemNo,
                        ItemDescription = mBookitem.ItemDescription,
                        ServiceNo = mBookitem.ServiceNo,
                        SubItemNo = mBookitem.SubItemNo,
                        ShortServiceDesc = mBookitem.ShortServiceDesc
                    };
                pendingItems.Add(item);
                existingItems.Add(item);
            }
            selectedRows = existingItems.AsEnumerable();
            StateHasChanged();
        }

        foreach (var pendingItem in pendingItems)
        {
            var lineItem = lineItems.Find(p => p.ItemNo == pendingItem.ItemNo);
            if (lineItem != null) continue;

            lineItems.Add(new LineItem
                {
                    ItemNo = pendingItem.ItemNo,
                    ItemDescription = pendingItem.ItemDescription
                });
        }
    }


    async Task LoadPendingOrderItemsAsync()
    {
        loading = true;
        var result = await workOrderService.GetPendingWorkOrderItems(WorkOrderId);

        if (result.Succeeded)
        {
            pendingItems = result.Data;
        }
        loading = false;
    }

    async Task Submit()
    {
        if (!form.Validate()) return;

        if (selectedRows == null || selectedRows.Count() == 0)
        {
            await messageService.Warning("Please select atleast one line item");
            return;
        }

        foreach (var item in selectedRows)
        {
            model.Items.Add(new MBookItemRequest
                {
                    WorkOrderItemId = item.WorkOrderItemId
                });
        }

        loading = true;
        dynamic result;
        if (MBook == null)
        {
            result = await mBookService.CreateMeasurementBook(model);
        }
        else
        {
            result = await mBookService.UpdateMeasurementBook(MBook.Id, model);
        }
        loading = false;

        if (result.Succeeded)
        {
            Close();
            await OnItemUpdate.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void Close()
    {
        OnClose.InvokeAsync();
        form.ValidationReset();
        pendingItems.Clear();
        lineItems.Clear();
    }

    private class LineItem
    {
        public int ItemNo { get; set; }
        public string ItemDescription { get; set; }
    }
}