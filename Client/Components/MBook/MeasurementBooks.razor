<Button Icon="@(IconType.Outline.Plus)" 
        Type="@(ButtonType.Primary)" 
        OnClick="_=> OpenSideDrawer()"       
        Style="margin-bottom: 1rem">Add Measurement Book</Button>

<Table Loading="@loading" 
        TItem="MBookResponse" 
        Size="@TableSize.Small" 
        DataSource="@mbooks"
        Responsive="false"
        ScrollX="650">

    <RowTemplate>
        <Column Title="Title" @bind-Field="@context.Title" Width="40%" />
        <Column Title="Measurer" Width="16%" TData="string">
            <Tooltip Title="@context.Measurer.ToString()" Placement="@Placement.Left">
                <span style="cursor: pointer">@context.Measurer?.DisplayName</span>
            </Tooltip>
        </Column>
        <Column Title="Validator" Width="16%" TData="string">
            <Tooltip Title="@context.Validator.ToString()" Placement="@Placement.Left">
                <span style="cursor: pointer">@context.Validator?.DisplayName</span>
            </Tooltip>
        </Column>
        <ActionColumn Title="Action" Width="25%">
            <Row Justify="ceter">
                @if (context.Status == MBookStatus.CREATED.ToString())
                {
                    <Button Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" OnClick="_=> OpenSideDrawer(context.Id)"  Style="margin-right: 0.2rem"/>
                    <Popconfirm Title="Sure to delete?"
                                OnConfirm="()=> DeleteMBook(context.Id)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Danger  Style="margin-right: 0.2rem"/>
                    </Popconfirm>
                    <Popconfirm Title="Sure to publish?"
                                OnConfirm="()=> PublishMBook(context.Id)"
                                OkText="Yes"
                                CancelText="No">
                        <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small">Publish</Button>
                    </Popconfirm>
                }
                @if (context.Status == MBookStatus.PUBLISHED.ToString())
                {
                    var mbookId = context.Id;
                    <Dropdown>
                        <Overlay>
                            <Menu>
                                <MenuItem>
                                    <a @onclick="_ => OpenUpdateManagerDrawer(mbookId, UpdateManagerType.MEASURER)">
                                        Change Measurer
                                    </a>
                                </MenuItem>
                                <MenuItem>
                                    <a @onclick="_ => OpenUpdateManagerDrawer(mbookId, UpdateManagerType.VALIDATOR)">
                                        Change Validator
                                    </a>
                                </MenuItem>
                                <MenuItem>
                                    <a @onclick="_ => OpenUpdateManagerDrawer(mbookId, UpdateManagerType.ENGINEER_INCHARGE)">
                                        Transfer Ownership
                                    </a>
                                </MenuItem>
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <a class="ant-dropdown-link" @onclick:preventDefault>
                                Delegate <Icon Type="down" />
                            </a>
                        </ChildContent>
                    </Dropdown>
                }
            </Row>
        </ActionColumn>
    </RowTemplate>

    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Items" Responsive="false">
            <Column TData="string" Title="Service No" Width="15%">@context.ServiceNo</Column>
            <Column TData="string" Title="Service Description" Width="40%">@context.ShortServiceDesc</Column>           
            <Column TData="string" Title="UOM" Width="10%">@context.Uom</Column>
            <Column Title="Quantity" TData="float" DataIndex="@nameof(context.PoQuantity)" Width="10%" />
            <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" Width="10%" />
            <Column Title="Total Amount" TData="decimal" DataIndex="@nameof(context.TotalAmount)" Width="15%" />
        </Table>
    </ExpandTemplate>
</Table>

<AddEditMBookDrawer MBook="currentMBook" 
        Visible="@drawerVisible" 
        OnClose="@OnCloseSideDrawer" 
        OnItemUpdate="@OnUpdateItem" />

<UpdateMBManagerDrawer MBook="currentMBook"
        UpdateManagerType="@updateManagerType"
        Visible="@managerDrawerVisible" 
        OnClose="@OnCloseManagerUpdateDrawer" 
        OnItemUpdate="@OnUpdateItem" />

@code{
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    

    MBookResponse currentMBook;
    UpdateManagerType updateManagerType;

    List<MBookResponse> mbooks = new();

    bool drawerVisible;
    bool managerDrawerVisible;
    bool loading;

    void OpenSideDrawer(int itemId = 0)
    {
        currentMBook = mbooks.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void OpenUpdateManagerDrawer(int itemId, UpdateManagerType type)
    {
        currentMBook = mbooks.FirstOrDefault(p => p.Id == itemId);
        updateManagerType = type;

        managerDrawerVisible = true;
    }

    void OnCloseSideDrawer()
    {
        drawerVisible = false;
    }

    void OnCloseManagerUpdateDrawer()
    {
        managerDrawerVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMeasurementBooks();
    }

    async Task LoadMeasurementBooks()
    {
        loading = true;
        mbooks = await mBookService.GetMBooksByWorkOrderId(WorkOrderId);
        loading = false;
    }

    async Task DeleteMBook(int id)
    {
        loading = true;
        var result = await mBookService.DeleteMeasurementBook(id);
        loading = false;

        if (result.Succeeded)
        {
            mbooks = mbooks.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnUpdateItem()
    {
        await LoadMeasurementBooks();
    }

    async Task PublishMBook(int id)
    {
        loading = true;
        var result = await mBookService.PublishMeasurementBook(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMeasurementBooks();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }


}
