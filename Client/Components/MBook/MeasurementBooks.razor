<Button Icon="@(IconType.Outline.Plus)" 
        Type="@(ButtonType.Primary)" 
        OnClick="_=> OpenSideDrawer()" 
        Disabled="@(WorkOrderStatus != "PUBLISHED")"
        Style="margin-bottom: 1rem">Add Measurement Book</Button>

<Table Loading="@loading" TItem="MBookResponse" Size="@TableSize.Small" DataSource="@mbooks" HidePagination>
    <RowTemplate>
        <Column Title="Title" @bind-Field="@context.Title" Width="40%" />
        <Column Title="Measurement Officer" @bind-Field="@context.MeasurementOfficer" Width="15%" />
        <Column Title="Validating Officer" @bind-Field="@context.ValidatingOfficer" Width="15%" />
        <Column @bind-Field="@context.Status" Width="10%">
            @if (context.Status == MBookStatus.COMPLETED.ToString())
            {
                <Tag Color="gold">@context.Status</Tag>
            }
            else if (context.Status == MBookStatus.PUBLISHED.ToString())
            {
                <Tag Color="blue">@context.Status</Tag>
            }
            else
            {
                <Tag Color="green">@context.Status</Tag>
            }
        </Column>
        <ActionColumn Title="Action" Width="20%">
            @if (context.Status == MBookStatus.CREATED.ToString())
            {
                <Button Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" OnClick="_=> OpenSideDrawer(context.Id)">Edit</Button>
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> DeleteMBook(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Danger>Delete</Button>
                </Popconfirm>
                <Popconfirm Title="Sure to publish?"
                            OnConfirm="()=> PublishMBook(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)" Type="@ButtonType.Primary" Size="@ButtonSize.Small">Publish</Button>
                </Popconfirm>
            }
        </ActionColumn>
    </RowTemplate>

    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.Items" HidePagination>
            <Column TData="string" DataIndex="@nameof(context.Description)" Width="50%" />
            <Column TData="string" DataIndex="@nameof(context.Uom)" Width="10%" />
            <Column Title="Quantity" TData="float" DataIndex="@nameof(context.PoQuantity)" Width="10%" />
            <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" Width="15%" />
            <Column Title="Total Amount" TData="decimal" DataIndex="@nameof(context.TotalAmount)" Width="15%" />
        </Table>
    </ExpandTemplate>
</Table>

<AddEditMBookDrawer MBook="currentMBook" Visible="@drawerVisible" OnClose="@OnCloseSideBar" OnItemUpdate="@OnUpdateItem" />

@code{
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    [CascadingParameter]
    public string WorkOrderStatus { get; set; }

    MBookResponse currentMBook;

    List<MBookResponse> mbooks = new();

    bool drawerVisible;
    bool loading;

    void OpenSideDrawer(int itemId = 0)
    {
        currentMBook = mbooks.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void OnCloseSideBar()
    {
        drawerVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMeasurementBooks();
    }

    async Task LoadMeasurementBooks()
    {
        loading = true;
        mbooks = await mBookService.GetMBooksByWorkOrderId(WorkOrderId);
        loading = false;
    }

    async Task DeleteMBook(int id)
    {
        loading = true;
        var result = await mBookService.DeleteMeasurementBook(id);
        loading = false;

        if (result.Succeeded)
        {
            mbooks = mbooks.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnUpdateItem()
    {
        await LoadMeasurementBooks();
    }

    async Task PublishMBook(int id)
    {
        loading = true;
        var result = await mBookService.PublishMeasurementBook(id);
        loading = false;

        if (result.Succeeded)
        {
            await LoadMeasurementBooks();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }
}
