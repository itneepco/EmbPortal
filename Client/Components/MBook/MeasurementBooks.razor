@inject IMBookService mBookService
@inject MessageService messageService 

<Button Icon="@(IconType.Outline.Plus)" Type="@(ButtonType.Primary)" @onclick="_=> OpenSideDrawer()" Style="margin-bottom: 1rem">Add Measurement Book</Button>

<AddEditMBookDrawer MBook="currentMBook" Visible="@drawerVisible" OnClose="@OnCloseSideBar" OnUpdateItem="@OnUpdateItem"/>

<Table Loading="@loading" TItem="MeasurementBookResponse" Size="@TableSize.Small" DataSource="@mbooks" HidePagination>
    <Column @bind-Field="@context.Title" Width="35%">
        <a>@context.Title</a>
    </Column>
    <Column Title="Measurement Officer" @bind-Field="@context.MeasurementOfficer" Width="15%" />
    <Column Title="Validating Officer" @bind-Field="@context.ValidatingOfficer" Width="15%" />
    <Column @bind-Field="@context.Status" Width="10%">
        @if (context.Status == "COMPLETED")
        {
            <Tag Color="gold">@context.Status</Tag>
        }
        else if (context.Status == "PUBLISHED")
        {
            <Tag Color="blue">@context.Status</Tag>
        }
        else
        {
            <Tag Color="green">@context.Status</Tag>
        }
    </Column>
    <ActionColumn Title="Action" Width="25%">
        <Button Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" OnClick="_=> OpenSideDrawer(context.Id)">Edit</Button>
        <Popconfirm Title="Sure to delete?"
                    OnConfirm="()=> DeleteMBook(context.Id)"
                    OkText="Yes"
                    CancelText="No">
            <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Loading="@loading" Danger>Delete</Button>
        </Popconfirm>
    </ActionColumn>
</Table>

@code{
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    MeasurementBookResponse currentMBook;

    List<MeasurementBookResponse> mbooks = new();

    bool drawerVisible;
    bool loading;

    void OpenSideDrawer(int itemId = 0)
    {
        currentMBook = mbooks.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void OnCloseSideBar()
    {
        drawerVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMeasurementBooks();
    }

    async Task LoadMeasurementBooks()
    {
        loading = true;
        mbooks = await mBookService.GetMBooksByWorkOrderId(WorkOrderId);
        loading = false;
    }

    async Task DeleteMBook(int id)
    {
        loading = true;
        var result = await mBookService.DeleteMeasurementBook(id);
        loading = false;

        if (result.Succeeded)
        {
            mbooks = mbooks.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnUpdateItem()
    {
        await LoadMeasurementBooks();
    }
}
