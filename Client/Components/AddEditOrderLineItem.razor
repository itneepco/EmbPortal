@using EmbPortal.Shared.Responses
@using EmbPortal.Shared.Requests
@inject MessageService _message
@inject IWorkOrderService _workOrderService

<Button Icon="@(IsEdit ? IconType.Outline.Edit : IconType.Outline.Plus)"
        Type="@(IsEdit ? ButtonType.Default : ButtonType.Primary)"
        @onclick="_=>open()">
    @ChildContent
</Button>

<Drawer Closable="true" Width="720" Visible="visible" Title="Title" OnClose="_=>close()">
    <Form Style="height:90%" Layout="@FormLayout.Vertical" Loading="loading" Model="@model" OnFinish="OnSubmit">
        <FormItem Label="Line Item Description">
            <TextArea Placeholder="Please enter line item description" Rows="2" @bind-Value="@context.Title" />
        </FormItem>

        <FormItem>
            <AddEditOrderSubItem></AddEditOrderSubItem>
        </FormItem>

        <FormItem WrapperColOffset="18" WrapperColSpan="6">
            <Button Type="@ButtonType.Default" OnClick="close">Cancel</Button>
            <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
        </FormItem>
    </Form>
</Drawer>


@code{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [Parameter]
    public string Title { get; set; }

    public WorkOrderRequest model { get; set; } = new();

    bool visible = false;
    bool loading = false;

    void open()
    {
        this.visible = true;
    }

    void close()
    {
        this.visible = false;
    }

    async Task OnSubmit(EditContext context)
    {
        loading = true;
        var result = await _workOrderService.CreateWorkOrder(model);
        loading = false;

        if (result.Succeeded)
        {
            this.visible = false;
            StateHasChanged();
            await _message.Success(result.Message);
        }
        else
        {
            await _message.Error(result.Message);
        }
    }
}