@using EmbPortal.Shared.Responses
@using EmbPortal.Shared.Requests
@inject MessageService messageService
@inject IProjectService projectservice
@inject IContractorService contractorservice
@inject IWorkOrderService workOrderService
@inject NavigationManager navManager 

<Button Icon="@(IsEdit ? IconType.Outline.Edit : IconType.Outline.Plus)"
        Type="@(IsEdit ? ButtonType.Default : ButtonType.Primary)"
        @onclick="_=>open()">
    @ChildContent
</Button>

<Drawer Closable="true" Width="720" Visible="visible" Title="@ChildContent" OnClose="_=>close()">
    <Form Style="height:90%" Layout="@FormLayout.Vertical" Loading="loading" Model="@model" OnFinish="OnSubmit">
        <Row Gutter="16">
            <AntDesign.Col Span="12">
                <FormItem Label="Project">
                    <Select DataSource="@projects"
                            Style="width: 100%"
                            @bind-Value="@context.ProjectId"
                            ValueName="@nameof(ProjectResponse.Id)"
                            LabelName="@nameof(ProjectResponse.Name)"
                            Placeholder="Select a project"
                            AllowClear>
                    </Select>
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="12">
                <FormItem Label="Contractor">
                    <Select DataSource="@contractors"
                            @bind-Value="@context.ContractorId"
                            ValueName="@nameof(ContractorResponse.Id)"
                            LabelName="@nameof(ContractorResponse.Name)"
                            Style="width: 100%"
                            Placeholder="Select a contractor"
                            AllowClear>
                    </Select>
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="24">
                <FormItem Label="Work Description">
                    <TextArea Placeholder="Please enter work description" Rows="4" @bind-Value="@context.Title" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="16">
                <FormItem Label="Work Order No">
                    <Input Placeholder="Work Order No" TValue="string" @bind-Value="@context.OrderNo" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="8">
                <FormItem Label="Work Order Date">
                    <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.OrderDate" Format="dd-MM-yyyy" Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
        </Row>
        <Row Gutter="16">
            <AntDesign.Col Span="16">
                <FormItem Label="Agreement No">
                    <Input Placeholder="Agreement No" TValue="string" @bind-Value="@context.AgreementNo" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="8">
                <FormItem Label="Agreement Date">
                    <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.AgreementDate" Format="dd-MM-yyyy" Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
        </Row>

        <FormItem WrapperColOffset="18" WrapperColSpan="6">
            <Button Type="@ButtonType.Default" OnClick="close">Cancel</Button>
            <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
        </FormItem>
    </Form>
</Drawer>


@code{
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [Parameter]
    public WorkOrderResponse WorkOrder { get; set; }

    WorkOrderRequest model { get; set; } = new();

    List<ProjectResponse> projects = new();
    List<ContractorResponse> contractors = new();

    bool visible = false;
    bool loading = false;

    async Task LoadProjects()
    {
        projects = await projectservice.GetAllProjects();
    }

    async Task LoadContractors()
    {
        contractors = await contractorservice.GetAllContractors();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
        await LoadContractors();

        if(IsEdit)
        {
            model.OrderNo = WorkOrder.OrderNo;
            model.OrderDate = WorkOrder.OrderDate;
            model.AgreementNo = WorkOrder.AgreementNo;
            model.AgreementDate = WorkOrder.AgreementDate;
            model.Title = WorkOrder.Title;
            model.ProjectId = WorkOrder.ProjectId;
            model.ContractorId = WorkOrder.ContractorId;
        }
    }

    void open()
    {
        this.visible = true;
    }

    void close()
    {
        this.visible = false;
    }

    async Task OnSubmit(EditContext context)
    {
        loading = true;
        dynamic result;
        if (IsEdit)
        {
            result = await workOrderService.UpdateWorkOrder(WorkOrder.Id , model);
        }
        else
        {
            result = await workOrderService.CreateWorkOrder(model);
        }
        loading = false;

        if (!result.Succeeded)
        {
            await messageService.Error(result.Message);
            return;
        }

        this.visible = false;
        var orderId = IsEdit ? WorkOrder.Id : result.Data;
        navManager.NavigateTo($"/workorder/{orderId}");
        await messageService.Success(result.Message);
    }
}