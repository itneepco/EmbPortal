@inject MessageService messageService
@inject IUomService _uomService
@inject IWorkOrderService workOrderService

<Drawer Closable="true"
        Width="750"
        Title="@(LineItem == null ?  "Add Item" : "Edit Item")"
        Visible="@Visible"
        OnClose="@Close">

    <Form Model="@model" OnFinish="OnSubmit" Layout="@FormLayout.Vertical" Loading="loading">
        <FormItem Label="Order Line Item Description">
            <TextArea Placeholder="Please enter line item description" Rows="2" @bind-Value="@context.Description" AutoFocus />
        </FormItem>
        <FormItem Label="Unit of Measurement">
            <Select DataSource="@uoms"
                    @bind-Value="@context.UomId"
                    ValueName="@nameof(UomResponse.Id)"
                    LabelName="@nameof(UomResponse.Name)"
                    Placeholder="Select Uom"
                    AllowClear>
            </Select>
        </FormItem>
        <FormItem Label="Unit Rate">
            <Input @bind-Value="@context.UnitRate" />
        </FormItem>
        <FormItem Label="PO Quantity">
            <Input @bind-Value="@context.PoQuantity" />
        </FormItem>
        <Row Style="margin-top: 2rem">
            <AntDesign.Col Flex="1"></AntDesign.Col>
            <AntDesign.Col>
                <Button Type="@ButtonType.Default" OnClick="Close">Cancel</Button>
                <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
            </AntDesign.Col>
        </Row>
    </Form>
</Drawer>

@code{
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    [Parameter]
    public WorkOrderItemResponse LineItem { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> OnItemUpdate { get; set; }

    WorkOrderItemRequest model = new();
    List<UomResponse> uoms = new();
    bool loading = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadAllUoms();
    }

    protected override void OnParametersSet()
    {
        model = new();

        if (LineItem != null)
        {
            // for editing existing line item
            model.Description = LineItem.Description;
            model.UomId = LineItem.UomId;
            model.UnitRate = LineItem.UnitRate;
            model.PoQuantity = LineItem.PoQuantity;
        }
    }

    async Task LoadAllUoms()
    {
        uoms = await _uomService.GetAllUoms();
    }

    async Task OnSubmit()
    {

        loading = true;
        dynamic result;
        if (LineItem == null)
        {
            result = await workOrderService.CreateWorkOrderItem(WorkOrderId, model);
        }
        else
        {
            result = await workOrderService.UpdateWorkOrderItem(WorkOrderId, LineItem.Id, model);
        }
        loading = false;

        if (result.Succeeded)
        {
            Close();
            await OnItemUpdate.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void Close()
    {
        OnClose.InvokeAsync();
    }
}