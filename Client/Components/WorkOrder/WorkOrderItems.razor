<Button Icon="@(IconType.Outline.Plus)"
        Type="@(ButtonType.Primary)"
        OnClick="_=> OpenSideDrawer()"
        Disabled="@(WorkOrderStatus == "COMPLETED")"
        Style="margin-bottom: 1rem">Add Item</Button>

<Table DataSource="Items" TItem="WorkOrderItemResponse" Size="@TableSize.Small">
    <RowTemplate>
        <Column TData="string" DataIndex="@nameof(context.Description)" Width="45%" />
        <Column TData="string" DataIndex="@nameof(context.Uom)" Width="10%" />
        <Column TData="float" DataIndex="@nameof(context.UnitRate)" Width="10%" />
        <Column TData="float" DataIndex="@nameof(context.PoQuantity)" Width="10%" />
        
        <ActionColumn Title="Action" Width="25%">
            <Button Icon="@(IconType.Outline.Edit)" 
                    Size="@ButtonSize.Small"
                    Disabled="@(WorkOrderStatus != "CREATED")"
                    OnClick="_=> OpenSideDrawer(context.Id)">Edit</Button>

            <Popconfirm Title="Sure to delete?"
                        OnConfirm="()=> OnDeleteItem(context.Id)"
                        OkText="Yes"
                        CancelText="No">
                <Button Icon="@(IconType.Outline.Delete)" 
                        Size="@ButtonSize.Small"
                        Disabled="@(WorkOrderStatus != "CREATED")"
                        Loading="@loading" Danger>Delete</Button>
            </Popconfirm>
        </ActionColumn>
    </RowTemplate>
    
</Table>

<AddEditOrderItemDrawer LineItem="@currentLineItem" Visible="@drawerVisible" OnItemUpdate="@OnItemUpdate" OnClose="@OnCloseSideBar" />

@code {
    [CascadingParameter]
    public int WorkOrderId { get; set; }

    [CascadingParameter]
    public string WorkOrderStatus { get; set; }

    [Parameter]
    public List<WorkOrderItemResponse> Items { get; set; }

    [Parameter]
    public EventCallback ReloadPage { get; set; }

    WorkOrderItemResponse currentLineItem;

    bool drawerVisible;
    bool loading;

    void OpenSideDrawer(int itemId = 0)
    {
        currentLineItem = Items.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void OnCloseSideBar()
    {
        drawerVisible = false;
    }

    async Task OnDeleteItem(int itemId)
    {
        loading = true;
        var result = await workOrderService.DeleteWorkOrderItem(WorkOrderId, itemId);
        loading = false;

        if (result.Succeeded)
        {
            Items = Items.Where(item => item.Id != itemId).ToList();
            StateHasChanged();
            await ReloadPage.InvokeAsync();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task OnItemUpdate()
    {
        await ReloadPage.InvokeAsync();
    }
}