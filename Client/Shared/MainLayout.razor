@using Client.Breadcrumbs;
@inherits LayoutComponentBase

<AuthorizeView>
    <NotAuthorized>
        @Body
    </NotAuthorized>

    <Authorizing>
        @Body
    </Authorizing>

    <Authorized>       
        <Layout>
            <Header Style="position: fixed; z-index: 999; width: 100%">
                <div class="logo">
                    <img alt="Logo" src="images/logo90.gif" width="44" />
                    <span style="margin-left: 10px; font-size: 18px">EMB Portal</span>
                </div>

                <div class="profile">
                    <Dropdown Trigger="@(new Trigger[] { Trigger.Click })">
                        <Overlay>
                            <Menu>
                                <MenuItem>Profile</MenuItem>
                                <MenuItem OnClick="@LogoutUser">Logout</MenuItem>
                            </Menu>
                        </Overlay>
                        <ChildContent>
                            <a @onclick:preventDefault class="username">
                                <span>@displayName</span>
                            </a>
                            <Avatar Icon="user" Style="color:#000000;background-color:#fafafa" />                           
                        </ChildContent>
                    </Dropdown>
                </div>
            </Header>

            <Content Class="site-layout" Style="padding:10px 10px 0 10px; margin-top: 64px; ">         
                <div class="site-layout-background" style="padding: 24px; min-height: 70vh ">
                    @Body
                </div>
            </Content>
            
            <Footer Style="text-align: center;">Designed & Maintained by IT Department, NEEPCO. </Footer>
        </Layout>
    </Authorized>
</AuthorizeView>

<style>
    #main {
        padding: 18px;
        padding-bottom: 60px;
        background: white;
        min-height: 72vh;
    }

   
    #components-layout-demo-fixed .logo {
        width: 120px;
        height: 31px;
        background: rgba(255, 255, 255, 0.2);
        margin: 16px 24px 16px 0;
        float: left;
    }

    .site-layout .site-layout-background {
        background: #fff;
    }

    .username {
        margin-right: 0.25rem;
        font-size: 14px;
        color: white;
        text-decoration: none;
    }

    .title {
        font-size: 22px;
    }

    .profile {
        float: right;
        margin-right: 2rem;
        color: white !important;
    }
    
.breadcrumb {
    margin-bottom: 8px !important;
    font-size: 14px !important;
}

.ant-drawer-title {
    font-size: 16px !important;
    text-transform: uppercase !important;
    letter-spacing: .12em !important;
    color: #fff !important;
}

.ant-drawer-header {
    border-bottom: 1px solid #00394d !important;
    background: #0072A3 !important;
}

.ant-btn-primary1 {
    border-color: #0072A3 !important;
    background: #0072A3 !important;
    font-family: 'Inter', sans-serif !important;
    font-weight: 600 !important;
    font-size: 12px !important;
    text-transform: uppercase !important;
    letter-spacing: .12em !important;
}
    .logo {
        float: left;
    }
</style>

@code {
    private List<SiteBreadcrumbItem> breadcumbList = new();
    private string displayName;
    private ClaimsPrincipal currentUser;
    List<MenuDataItem> _menuData = new()
    {
        new MenuDataItem
        {
            Path = "/",
            Name = "Dashboard",
            Key = "dashboard",
            Icon = "dashboard",
        },
        new MenuDataItem
        {
            Path = "/workorder",
            Name = "Work Orders",
            Key = "workorder",
            Icon = "container",
        },
        new MenuDataItem
        {
            Path = "/mbooks",
            Name = "Measurement Books",
            Key = "mbook",
            Icon = "snippets",
        }        
    };

    private LinkItem[] _links = { };
    protected override async Task OnParametersSetAsync() =>  await LoadDataAsync();

    async Task LogoutUser() => await authService.Logout();

    private async Task LoadDataAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        currentUser = state.User;

        if (currentUser == null) return;

        if (currentUser.Identity.IsAuthenticated)
        {
            displayName = currentUser.GetUserNameFromClaimsPrincipal();
        }
    }

    private void setBreadCrumbList(List<SiteBreadcrumbItem> arg)
    {
        breadcumbList.Clear();
        breadcumbList.AddRange(arg);
        StateHasChanged();
    }

}