@page "/mbooks/{Id}/{Tab?}"
@attribute [Authorize]

<Breadcrumb Style="margin-bottom: 0.5rem">
    <BreadcrumbItem Href="/">
        <Icon Type="dashboard" />
        <span>Dashboard</span>
    </BreadcrumbItem>
    <BreadcrumbItem Href="/mbooks">
        <Icon Type="snippets" />
        <span>Measurement Books</span>
    </BreadcrumbItem>
    <BreadcrumbItem>
        Details
    </BreadcrumbItem>
</Breadcrumb>

@if (data != null)
{
<Tabs @bind-ActiveKey="@activeKey" Animated>
    <TabPane Tab="Measurement Book Detail" Key="tab1">
        <Descriptions Bordered Size="@DescriptionsSize.Small" Column="@column">
            <DescriptionsItem Title="Measurement Book">@data.Title</DescriptionsItem>
            <DescriptionsItem Title="Measurer">
                <Tooltip Title="@data.Measurer.ToString()" Placement="@Placement.Left">
                    <span style="cursor: pointer">@data.Measurer?.DisplayName</span>
                </Tooltip>
            </DescriptionsItem>
            <DescriptionsItem Title="Validator">
                <Tooltip Title="@data.Validator.ToString()" Placement="@Placement.Left">
                    <span style="cursor: pointer">@data.Validator?.DisplayName</span>
                </Tooltip>
            </DescriptionsItem>
            <DescriptionsItem Title="Order No">@data.WorkOrder.OrderNo</DescriptionsItem>
            <DescriptionsItem Title="Order Date">@data.WorkOrder.OrderDate.ToString("dd/MM/yyyy")</DescriptionsItem>
            <DescriptionsItem Title="Contractor">@data.WorkOrder.Contractor</DescriptionsItem>
            <DescriptionsItem Title="Project">@data.WorkOrder.Project</DescriptionsItem>
            <DescriptionsItem Title="Item Description">@data.Items.First()?.ItemDescription</DescriptionsItem>
        </Descriptions>

        <Divider Plain>Measurement Book Items</Divider>

        <Table TItem="MBookItemResponse" 
               DataSource="@data.Items" 
               Size="@TableSize.Small"
               ScrollX="600"
               Responsive="false"
               Bordered>

            <Column Title="SubItem No" TData="long" Width="8%">@context.SubItemNo</Column>
            <Column Title="Service No" TData="long" Width="9%">@context.ServiceNo</Column>
            <Column Title="Service Description" TData="string" Width="25%">@context.ShortServiceDesc</Column>
            <Column Title="Uom" TData="string" Width="8%">@context.Uom</Column>
            <Column Title="Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" Width="10%"></Column>
            <Column Title="PO. Qty" TData="float" DataIndex="@nameof(context.PoQuantity)" Width="10%"></Column>
            <Column Title="Measured Qty (Cum)" TData="float" Width="10%">
                @context.CumulativeMeasuredQty.ToString("0.00")
            </Column>
            <Column Title="Measured Qty (App)" TData="float" Width="10%">
                @context.AcceptedMeasuredQty.ToString("0.00")
            </Column>
            <Column Title="Till Last RA" TData="float" Width="10%">
                @context.TillLastRAQty.ToString("0.00")
            </Column>
        </Table>
    </TabPane>

    <TabPane Tab="Measurement Book Sheet" Key="tab2">
        <MBSheetLists MBookId="int.Parse(Id)" MBItems="@data.Items" />
    </TabPane>

    <TabPane Tab="Recurring Account Bill" Key="tab3">
        <RABillList MBookId="int.Parse(Id)" />
    </TabPane>
</Tabs>
}
else
{
    <Spin>
        <Empty />
    </Spin>
}

@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Tab { get; set; }

    public MBookDetailResponse data { get; set; }

    string activeKey = "tab1";

    private Dictionary<string, int> column = new Dictionary<string, int> {
        { "xxl", 3 },
        { "xl", 3},
        { "lg", 2},
        { "md", 2},
        { "sm", 1},
        { "xs", 1}
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadMBookDetailsAsync();

        if (string.IsNullOrWhiteSpace(Tab)) return;

        if(Tab == "tab2")
        {
            activeKey = "tab2";
        }
        if(Tab == "tab3")
        {
            activeKey = "tab3";
        }
    }

    async Task LoadMBookDetailsAsync()
    {
        var result = await mBookService.GetMBooksById(int.Parse(Id));
        if (!result.Succeeded)
        {
            navManager.NavigateTo("/mbooks");
            await messageService.Warning(result.Message);
            return;
        }

        data = result.Data;
    }
}
