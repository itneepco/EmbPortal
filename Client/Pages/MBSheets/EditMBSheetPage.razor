@page "/mbook/{MBookId}/mbsheet/{MBSheetId}"
@attribute [Authorize]

@if (mbSheet != null)
{
    <h3>Edit MB Sheet</h3>

    <Form Model="@model" OnFinish="@OnFormSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
        <Row Gutter="16">           
            <AntDesign.Col Span="6">
                <FormItem Label="Measurement Date">
                    <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.MeasurementDate" Format="dd-MM-yyyy" Style="width: 100%" />
                </FormItem>
            </AntDesign.Col>
            <AntDesign.Col Span="4">
                <FormItem Label="Action">
                    <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
                </FormItem>
            </AntDesign.Col>
        </Row>
    </Form>

    <CascadingValue Value="@int.Parse(MBookId)" Name="MBookId">
        <CascadingValue Value="@int.Parse(MBSheetId)" Name="MBSheetId">
            <MBSheetItemTable MBSheetItems="mbSheet.Items" ReloadPage="@ReloadPage" />
        </CascadingValue>
    </CascadingValue>

    <Row Justify="start" Style="margin-top: 2rem;">
        <Button OnClick="@GoToMBookDetailPage" Style="margin-right: 0.25rem;">Go Back</Button>
    </Row>

}
else
{
    <Spin>
        <Empty />
    </Spin>
}

@code {
    [Parameter]
    public string MBookId { get; set; }

    [Parameter]
    public string MBSheetId { get; set; }

    bool loading = false;

    MBSheetRequest model = new();
    MBSheetResponse mbSheet;

    async Task OnFormSubmit()
    {
        loading = true;
        dynamic result = await mbSheetService.EditMBSheet(int.Parse(MBSheetId), model);
        loading = false;
        StateHasChanged();

        if (result.Succeeded)
        {
            await messageService.Success("Successfully Updated MB Sheet Header");
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMBookDetailsAsync();

        if (mbSheet != null) // initialize the model with data from db
        {
            //model.Title = mbSheet.Title;
            model.MeasurementDate = mbSheet.MeasurementDate;
            model.MeasurementBookId = mbSheet.MeasurementBookId;
        }
    }

    async Task LoadMBookDetailsAsync()
    {
        loading = true;
        var result = await mbSheetService.GetMBSheetById(int.Parse(MBSheetId));

        if (!result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}");
            await messageService.Warning(result.Message);
            return;
        }

        mbSheet = result.Data;
        mbSheet.Items = mbSheet.Items.OrderBy(p => p.MBookItemId).ThenBy(p => p.Id).ToList();

        loading = false;
        StateHasChanged();
    }

    async Task ReloadPage()
    {
        await LoadMBookDetailsAsync();
    }

    void GoToMBookDetailPage()
    {
        navManager.NavigateTo($"/mbooks/{MBookId}/tab2");
    }
}
