@page "/mbook/{MBookId}/mbsheet"
@attribute [Authorize]

<Row Justify="center">
    <AntDesign.Col Lg="20" Md="22" Sm="24">
        <h3>Add MB Sheet</h3>

        <Form Model="@model" OnFinish="@OnFormSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
            <Row Gutter="16">
                <AntDesign.Col Span="14">
                    <FormItem Label="MB Sheet Title">
                        <Input Placeholder="General Remarks" @bind-Value="@context.Title" TValue="string" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <FormItem Label="Measurement Date">
                        <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.MeasurementDate" Format="dd-MM-yyyy" Style="width: 100%" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="4">
                    <FormItem Label="Action">
                        <Button HtmlType="submit" Type="@ButtonType.Primary">Save</Button>
                    </FormItem>
                </AntDesign.Col>
            </Row>
        </Form>

        @if (mbSheet != null)
        {
            <CascadingValue Value="@int.Parse(MBookId)" Name="MBookId" >
                <CascadingValue Value="@mbSheet.Id" Name="MBSheetId">
                    <MBSheetItemTable MBSheetItems="mbSheet.Items" ReloadPage="@ReloadPage" />
                </CascadingValue>
            </CascadingValue>
        }

        <Row Justify="start" Style="margin-top: 2rem;">
            <Button OnClick="@GoToMBookDetailPage" Style="margin-right: 0.25rem;">Go Back</Button>
        </Row>
    </AntDesign.Col>
</Row>

@code {
    [Parameter]
    public string MBookId { get; set; }

    MBSheetResponse mbSheet;

    bool loading = false;

    MBSheetRequest model = new();

    async Task OnFormSubmit()
    {
        loading = true;
        model.MeasurementBookId = int.Parse(MBookId); // set measurement book id
        dynamic result = await mbSheetService.CreateMBSheet(model);

        if (result.Succeeded)
        {
            IResult<MBSheetResponse> fetchResult = await mbSheetService.GetMBSheetById(result.Data);
            mbSheet = fetchResult.Data;
            loading = false;
            await messageService.Success("Successfully created MB Sheet Header");
        }
        else
        {
            loading = false;
            await messageService.Error(result.Message);
        }
    }

    async Task LoadMBookDetailsAsync()
    {
        if (mbSheet == null) return;

        loading = true;
        var result = await mbSheetService.GetMBSheetById(mbSheet.Id);
        loading = false;

        if (!result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}");
            await messageService.Warning(result.Message);
            return;
        }

        mbSheet = result.Data;
        mbSheet.Items = mbSheet.Items.OrderBy(p => p.MBookItemId).ThenBy(p => p.Id).ToList();

        StateHasChanged();
    }

    async Task ReloadPage()
    {
        await LoadMBookDetailsAsync();
    }

    void GoToMBookDetailPage()
    {
        navManager.NavigateTo($"/mbooks/{MBookId}/2");
    }
}
