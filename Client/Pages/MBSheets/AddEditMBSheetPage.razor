@page "/mbook/{MBookId}/mbsheet"

@if (data != null)
{
<Row>
    <AntDesign.Col Span="18" Offset="3">
        <h3>Add Edit MB Sheet</h3>

        <Form Model="@model" Layout="@FormLayout.Vertical">
            <Row Gutter="16">
                <AntDesign.Col Span="16">
                    <FormItem Label="MB Sheet Title">
                        <Input Placeholder="General Remarks" @bind-Value="@context.Title" TValue="string" AutoFocus />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="8">
                    <FormItem Label="Measurement Date">
                        <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.MeasurementDate" Format="dd-MM-yyyy" Style="width: 100%" />
                    </FormItem>
                </AntDesign.Col>
            </Row>

            <FormItem Label="Measurement Book Items">
                <Select DataSource="@data.Items"
                        @bind-Value="@lineItemId"
                        ValueName="@nameof(MBookItemResponse.Id)"
                        LabelName="@nameof(MBookItemResponse.Description)"
                        Placeholder="Select Measurement Book Item"
                        AllowClear>
                </Select>
            </FormItem>
        </Form>
    </AntDesign.Col>
</Row>
}
else
{
    <Spin>
        <Empty />
    </Spin>
}

@code {
    [Parameter]
    public string MBookId { get; set; }

    public MBookDetailResponse data { get; set; }

    MBSheetRequest model = new MBSheetRequest
    {
        Items = new List<MBSheetItemRequest>()
    };

    int lineItemId;
    bool loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadMBookDetailsAsync();
    }

    async Task LoadMBookDetailsAsync()
    {
        loading = true;
        var result = await mBookService.GetMBooksById(int.Parse(MBookId));
        loading = false;

        if (!result.Succeeded)
        {
            navManager.NavigateTo("/mbooks");
            await messageService.Warning(result.Message);
            return;
        }

        data = result.Data;
        StateHasChanged();
    }
}
