@page "/mbook/{MBookId}/mbsheet"

@if (data != null)
{
<Row>
    <AntDesign.Col Span="18" Offset="3">
        <h3>Add Edit MB Sheet</h3>

        <Form Model="@model" OnFinish="@OnFormSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
            <Row Gutter="16">
                <AntDesign.Col Span="16">
                    <FormItem Label="MB Sheet Title">
                        <Input Placeholder="General Remarks" @bind-Value="@context.Title" TValue="string" />
                    </FormItem>
                </AntDesign.Col>
                <AntDesign.Col Span="8">
                    <FormItem Label="Measurement Date">
                        <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.MeasurementDate" Format="dd-MM-yyyy" Style="width: 100%" />
                    </FormItem>
                </AntDesign.Col>
            </Row>

            <FormItem Label="Measurement Book Items">
                <Select DataSource="@data.Items"
                        @bind-Value="@lineItemId"
                        ValueName="@nameof(MBookItemResponse.Id)"
                        LabelName="@nameof(MBookItemResponse.Description)"
                        Placeholder="Select Measurement Book Item"
                        OnSelectedItemChanged="@(item => SelectLineItem(item))"
                        AllowClear>
                </Select>
            </FormItem>

            @foreach (var mBItem in selectedMBItems)
            {
                <MBSheetItem MBItemDescription="@mBItem.Description" 
                             MBSheetRequestItems="@model.Items.Where(i => i.MBookItemId == mBItem.Id).ToList()" 
                             OnOpenSideDrawer="() => OpenSideDrawer(mBItem)"
                             OnRemoveSelectedItem="() => RemoveSelectedItem(mBItem)"
                             @bind-MBSheetItemHash="selectedMBSheetItemHash"
                             OnRemoveMBSheetItem="@RemoveMBSheetItem"/>
            }

        <FormItem>
            <Button OnClick="@GoToMBookDetailPage" Style="margin-right: 0.25rem;">Cancel</Button>
            <Button HtmlType="submit" Type="@ButtonType.Primary">Submit</Button>
        </FormItem>
        </Form>
    </AntDesign.Col>
</Row>

<AddEditMBSheetItemDrawer Visible="@drawerVisible" 
                          OnClose="@CloseSideBar" 
                          @bind-MBSheetItem="@currentMBSheetItem" 
                          OnItemSubmit="@OnItemSubmit" />
}
else
{
<Spin>
    <Empty />
</Spin>
}

@code {
    [Parameter]
    public string MBookId { get; set; }

    public MBookDetailResponse data { get; set; }

    MBSheetRequest model = new MBSheetRequest
    {
        Items = new List<MBSheetItemRequest>()
    };

    MBSheetItemRequest currentMBSheetItem = new();

    int lineItemId;
    bool loading = false;
    bool drawerVisible = false;
    int selectedMBSheetItemHash;

    List<MBookItemResponse> selectedMBItems = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadMBookDetailsAsync();
        model.MeasurementBookId = int.Parse(MBookId);
    }

    async Task LoadMBookDetailsAsync()
    {
        loading = true;
        var result = await mBookService.GetMBooksById(int.Parse(MBookId));
        loading = false;

        if (!result.Succeeded)
        {
            navManager.NavigateTo("/mbooks");
            await messageService.Warning(result.Message);
            return;
        }

        data = result.Data;
        StateHasChanged();
    }

    void SelectLineItem(MBookItemResponse item)
    {
        if (item != null && selectedMBItems.Find(i => i.Id == item.Id) == null)
        {
            selectedMBItems.Add(item);
        }
    }

    void RemoveSelectedItem(MBookItemResponse item)
    {
        selectedMBItems.Remove(item);
        model.Items.RemoveAll(p => p.MBookItemId == item.Id);
    }

    void RemoveMBSheetItem()
    {
        model.Items.RemoveAll(i => i.GetHashCode() == selectedMBSheetItemHash);
    }

    void OpenSideDrawer(MBookItemResponse item)
    {
        currentMBSheetItem = new MBSheetItemRequest
        {
            MBookItemId = item.Id,
            Dimension = item.Dimension,
            Uom = item.Uom
        };

        drawerVisible = true;
    }

    void CloseSideBar()
    {
        drawerVisible = false;
    }

    void OnItemSubmit()
    {
        model.Items.Add(currentMBSheetItem);
        currentMBSheetItem = new();
    }

    async Task OnFormSubmit()
    {
        if (model.Items.Where(p => p.Total > 0).ToList().Count < 1)
        {
            await messageService.Error("Please select at least one item and add measurement details");
            return;
        }

        loading = true;
        dynamic result = await mbSheetService.CreateMBSheet(model);
        loading = false;

        if (result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}");
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void GoToMBookDetailPage()
    {
        navManager.NavigateTo($"/mbooks/{MBookId}");
    }
}
