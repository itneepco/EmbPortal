@page "/mbook/{MBookId:int}/mbsheet/{MBSheetId:int}/items/{MBSheetItemId:int}"
@attribute [Authorize]

<h3>Edit Measurements</h3>

<Breadcrumb Style="margin-bottom: 0.75rem">
    <BreadcrumbItem Href="/">
        <Icon Type="home" />
        <span>Dashboard</span>
    </BreadcrumbItem>

    <BreadcrumbItem Href="@($"mbook/{MBookId}/mbsheet/{MBSheetId}")">
        MB Sheet
    </BreadcrumbItem>

    <BreadcrumbItem>
        Edit Measurement
    </BreadcrumbItem>
</Breadcrumb>

<Spin Spinning="loading">
    <CascadingValue Value="MBookId" Name="MBookId">
        <CascadingValue Value="MBSheetId" Name="MBSheetId">
            <CascadingValue Value="MBSheetItemId" Name="MBSheetItemId">
                <MeasurementStepper Model="@model" MBItemStatus="@mbItemsStatuses"/>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</Spin>

@code {
    [Parameter] public int MBookId { get; set; }

    [Parameter] public int MBSheetId { get; set; }

    [Parameter] public int MBSheetItemId { get; set; }

    private bool loading;
    private MBSheetItemResponse mbSheetItem;

    private List<WorkOrderItemStatusResponse> mbItemsStatuses = new();
    private MBSheetItemRequest model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServerData();

        model.Id = mbSheetItem.Id;
        model.WorkOrderItemId = mbSheetItem.WorkOrderItemId;
        model.Measurements = mbSheetItem.Measurements.Select(x => new MBItemMeasurementRequest
        {
           No = x.No,
           Description = x.Description,
           Val1 = x.Val1,
           Val2 = x.Val2,
           Val3 = x.Val3
        }).ToList();
    }

    async Task LoadServerData()
    {
        loading = true;

        var mbSheetResult = await mbSheetService.GetMBSheetById(MBSheetId);
        var mbItemResult = await mbSheetService.GetMBSheetItemById(MBSheetId, MBSheetItemId);

        if (!mbItemResult.Succeeded || !mbSheetResult.Succeeded)
        {
            navManager.NavigateTo($"/mbook/{MBookId}/mbsheet/{MBSheetId}");
            await messageService.Warning(mbItemResult.Message);
            return;
        }

        var mbSheet = mbSheetResult.Data;
        
        // Redirect from edit page if the mbsheet is already validated or accepted
        if (mbSheet.Status == MBSheetStatus.VALIDATED || mbSheet.Status == MBSheetStatus.ACCEPTED)
        {
            navManager.NavigateTo($"/mbook/{MBookId}/mbsheet/{MBSheetId}");
        }

        mbSheetItem = mbItemResult.Data;
        mbItemsStatuses = await mBookService.GetCurrentMBItemsStatus(MBookId);

        loading = false;
    }
}