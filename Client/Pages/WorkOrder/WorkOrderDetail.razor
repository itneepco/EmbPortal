@page "/workorder/{Id}"
@inject MessageService messageService
@inject IWorkOrderService workOrderService

@if (data != null)
{
    <Tabs Animated>
        <TabPane Tab="Work Order Header" Key="1">
            <Descriptions Bordered Size="@DescriptionsSize.Middle">
                <DescriptionsItem Title="Order No" Span="2">@data.OrderNo</DescriptionsItem>
                <DescriptionsItem Title="Order Date" Span="2"> @data.OrderDate</DescriptionsItem>
                <DescriptionsItem Title="Agreement No" Span="2"> @data.AgreementNo</DescriptionsItem>
                <DescriptionsItem Title="Agreement Date" Span="2"> @data.AgreementDate</DescriptionsItem>
                <DescriptionsItem Title="Contractor" Span="2">@data.ContractorName</DescriptionsItem>
                <DescriptionsItem Title="Status" Span="2"><Tag Color="green">@data.Status</Tag></DescriptionsItem>
                <DescriptionsItem Title="Work Description" Span="4">@data.Title</DescriptionsItem>
                <DescriptionsItem Title="Project" Span="2">@data.ProjectName</DescriptionsItem>
                <DescriptionsItem Title="Engineer In Charge" Span="2">@data.EngineerInCharge</DescriptionsItem>
            </Descriptions>
        </TabPane>

        <TabPane Tab="Work Order Line Items" Key="2">
            <Button Icon="@(IconType.Outline.Plus)" Type="@(ButtonType.Primary)" @onclick="_=> OpenSideDrawer(false)" Style="margin-bottom: 1rem">Add Item</Button>
            <Table DataSource="@data.Items" TItem="WorkOrderItemResponse">
                <RowTemplate>
                    <Column TData="string" DataIndex="@nameof(context.Description)" Width="40%"/>
                    <Column TData="float" DataIndex="@nameof(context.Quantity)" Width="15%"/>
                    <Column Title="Total Amount" TData="decimal" DataIndex="@nameof(context.TotalAmount)" Width="15%"/>
                    <ActionColumn Title="Action" Width="30%">
                        <Button Icon="@(IconType.Outline.Edit)" Size="@ButtonSize.Small" OnClick="_=> OpenSideDrawer(true, context.Id)">Edit</Button>
                        <Popconfirm Title="Sure to delete?"
                                    OnConfirm="()=> OnDeleteItem(context.Id)"
                                    OkText="Yes"
                                    CancelText="No">
                            <Button Icon="@(IconType.Outline.Delete)" Size="@ButtonSize.Small" Loading="@isLoading" Danger>Delete</Button>
                        </Popconfirm>
                    </ActionColumn>
                </RowTemplate>
                <ExpandTemplate Context="rowData">
                    <Table DataSource="rowData.Data.SubItems" Size="@TableSize.Small" Loading="rowData.Data.SubItems==null" HidePagination>
                        <Column TData="string" DataIndex="@nameof(context.Description)" />
                        <Column TData="string" DataIndex="@nameof(context.Uom)" />
                        <Column Title="Quantity" TData="float" DataIndex="@nameof(context.PoQuantity)" />
                        <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" />
                    </Table>
                </ExpandTemplate>
            </Table>

            <AddEditOrderItemDrawer LineItem="@currentLineItem" WorkOrderId="@int.Parse(Id)" Visible="@drawerVisible" OnItemUpdate="_=>OnItemUpdate()" OnClose="OnCloseSideBar" />
        </TabPane>
    </Tabs>
}

@code {
    [Parameter]
    public string Id { get; set; }

    public WorkOrderDetailResponse data { get; set; }

    WorkOrderItemResponse currentLineItem;

    bool drawerVisible;
    bool isLoading;

    void OpenSideDrawer(bool isEdit, int itemId = 0)
    {
        currentLineItem = data.Items.FirstOrDefault(p => p.Id == itemId);
        drawerVisible = true;
    }

    void OnCloseSideBar()
    {
        drawerVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkOrderDetailsAsync();
    }

    async Task LoadWorkOrderDetailsAsync()
    {
        data = await workOrderService.GetWorkOrderById(int.Parse(Id));
    }

    async Task OnItemUpdate()
    {
        await LoadWorkOrderDetailsAsync();
    }

    async Task OnDeleteItem(int itemId)
    {
        isLoading = true;
        var result = await workOrderService.DeleteWorkOrderItem(data.Id, itemId);
        isLoading = false;

        if (result.Succeeded)
        {
            data.Items = data.Items.Where(item => item.Id != itemId).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }
}
