@page "/workorder"
@inject HttpClient Http
@inject MessageService _message
@inject NavigationManager _navManager
@inject IWorkOrderService _workOrderService
@using EmbPortal.Shared.Responses
@using AntDesign.TableModels

<Row Style="margin-bottom: 0.75rem">
    <AntDesign.Col>
        <Space>
            <SpaceItem>
                <AddEditWorkOrderDrawer>Add Order</AddEditWorkOrderDrawer>
            </SpaceItem>
            @if (selectedRows != null)
            {
                <SpaceItem>
                    <AddEditWorkOrderDrawer IsEdit="@true" WorkOrder="selectedRows.First()">Edit Order</AddEditWorkOrderDrawer>
                </SpaceItem>
                <SpaceItem>
                    <Popconfirm Title="Are you sure delete this order?"
                            Placement="@Placement.Bottom"
                            OnConfirm="@(() => ConfirmDelete(selectedRows.First().Id))"
                            OkText="Yes"
                            CancelText="No">
                        <Button Danger Icon="@IconType.Outline.Delete" Loading="@_isLoading">Delete</Button>
                    </Popconfirm>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Default" Icon="@IconType.Outline.Read" OnClick="() => ViewDetail(selectedRows.First().Id)">Details</Button>
                </SpaceItem>
            }
        </Space>
    </AntDesign.Col>
    <AntDesign.Col Flex="2" />
    <AntDesign.Col Flex="1">
        <Row>
            <AntDesign.Col Flex="1">
                <Input Placeholder="Search" @bind-Value="@_search" @onkeyup="@KeyPressHandler" />
            </AntDesign.Col>
            <AntDesign.Col Style="margin-left: 0.75rem">
                <Tooltip Title="@IconType.Outline.Search">
                    <Button Type="@ButtonType.Default" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Search" OnClick="LoadWorkOrdersAsync" />
                </Tooltip>
            </AntDesign.Col>
        </Row>
    </AntDesign.Col>
</Row>

<Table @ref="table"
       TItem="WorkOrderResponse"
       DataSource="@workOrders"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@context.Id.ToString()" Type="radio" Width="5%" />
    <Column @bind-Field="@context.OrderNo" Width="15%" />
    <Column @bind-Field="@context.ContractorName" Width="20%"/>
    <Column @bind-Field="@context.Title" Width="50%" />
    <Column @bind-Field="@context.Status" Width="10%">
        @if (context.Status == "COMPLETED")
        {
            <Tag Color="gold">@context.Status</Tag>
        }
        else if (context.Status == "PUBLISHED")
        {
            <Tag Color="blue">@context.Status</Tag>
        }
        else
        {
            <Tag Color="green">@context.Status</Tag>
        }
    </Column>
</Table>

<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {

    List<WorkOrderResponse> workOrders;

    IEnumerable<WorkOrderResponse> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;
    bool _isLoading = false;
    string _search { get; set; }

    async Task LoadWorkOrdersAsync()
    {
        var response = await _workOrderService.GetWorkOrdersByProjectPagination(5, _pageIndex, _pageSize, _search);
        workOrders = response.Items;
        _total = response.TotalCount;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkOrdersAsync();
    }

    async Task OnChange(QueryModel<WorkOrderResponse> queryModel)
    {
        await LoadWorkOrdersAsync();
    }

    async Task KeyPressHandler(KeyboardEventArgs e)
    {
        if (e.Key.ToLowerInvariant() == "enter")
        {
            await LoadWorkOrdersAsync();
        }
    }

    async Task ConfirmDelete(int id)
    {
        _isLoading = true;
        var result = await _workOrderService.DeleteWorkOrder(id);
        _isLoading = false;
        selectedRows = null;

        if (result.Succeeded)
        {
            workOrders = workOrders.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await _message.Success(result.Message);
        }
        else
        {
            await _message.Error(result.Message);
        }
    }

    void ViewDetail(int id)
    {
        _navManager.NavigateTo($"/workorder/{id}");
    }
}
