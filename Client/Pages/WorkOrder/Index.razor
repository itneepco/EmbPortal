@page "/workorders"
@inject HttpClient Http
@inject MessageService _message
@inject IWorkOrderService _workOrderService

@using EmbPortal.Shared.Responses
@using AntDesign.TableModels
@using Client.Components

<Row Style="margin-bottom: 0.75rem">
    <AntDesign.Col>
        <AddEditWorkOrder>Add Order</AddEditWorkOrder>
    </AntDesign.Col>
    <AntDesign.Col Flex="2" />
    <AntDesign.Col Flex="1">
        <Row>
            <AntDesign.Col Flex="1">
                <Input Placeholder="Search" @bind-Value="@_search" @onkeyup="@KeyPressHandler" />
            </AntDesign.Col>
            <AntDesign.Col Style="margin-left: 0.75rem">
                <Tooltip Title="@IconType.Outline.Search">
                    <Button Type="@ButtonType.Default" Shape="@ButtonShape.Circle" Icon="@IconType.Outline.Search" OnClick="LoadWorkOrdersAsync" />
                </Tooltip>
            </AntDesign.Col>
        </Row>
    </AntDesign.Col>
</Row>

<Table @ref="table"
       TItem="WorkOrderResponse"
       DataSource="@workOrders"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Column @bind-Field="@context.Id" />
    <Column @bind-Field="@context.OrderNo" />
    <Column @bind-Field="@context.OrderDate" Format="yyyy-MM-dd" />
    <Column @bind-Field="@context.Title" />
    <Column @bind-Field="@context.ContractorName" />
    <ActionColumn>
        <Space>
            <SpaceItem>
                <AddEditWorkOrder IsEdit="@true">Edit Order</AddEditWorkOrder>
                <Popconfirm Title="Are you sure delete this order?"
                            OnConfirm="@(() => ConfirmDelete(@context.Id))"
                            OkText="Yes"
                            CancelText="No">
                    <Button Danger Icon="@IconType.Outline.Delete" Loading="@_isLoading">Delete</Button>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {

    List<WorkOrderResponse> workOrders;

    IEnumerable<WorkOrderResponse> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;
    bool _isLoading = false;
    string _search { get; set; }

    async Task LoadWorkOrdersAsync()
    {
        var response = await _workOrderService.GetWorkOrdersByProjectPagination(1, _pageIndex, _pageSize, _search);
        workOrders = response.Items;
        _total = response.TotalCount;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkOrdersAsync();
    }

    async Task OnChange(QueryModel<WorkOrderResponse> queryModel)
    {
        await LoadWorkOrdersAsync();
    }

    void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    async Task KeyPressHandler(KeyboardEventArgs e)
    {
        if (e.Key.ToLowerInvariant() == "enter")
        {
            await LoadWorkOrdersAsync();
        }
    }

    async Task ConfirmDelete(int id)
    {
        _isLoading = true;
        var result = await _workOrderService.DeleteWorkOrder(id);
        _isLoading = false;

        if (result.Succeeded)
        {
            workOrders = workOrders.Where(item => item.Id != id).ToList();
            StateHasChanged();
            await _message.Success(result.Message);
        }
        else
        {
            await _message.Error(result.Message);
        }
    }
}
