@page "/mbook/{MBookId}/rabill"
@attribute [Authorize(Roles = "Manager")]

<h3>Add New RA Bill</h3>

<Form Model="@model" OnFinish="@OnFormSubmit" Layout="@FormLayout.Vertical" Loading="@loading">
    <Row Gutter="16">        
        <AntDesign.Col Span="8">
            <FormItem Label="RA Bill Date">
                <DatePicker TValue="DateTime?" Picker="@DatePickerType.Date" @bind-Value="@context.BillDate" Format="dd-MM-yyyy" Style="width: 100%" />
            </FormItem>
        </AntDesign.Col>
    </Row>

    <RABillItemTable ModelItems="@model.Items.Where(p => p.AvailableQty > 0).ToList()" />

    <FormItem Style="margin-top: 1rem">
        <Row Justify="end">
            <Button OnClick="@GoToMBookDetailPage" Style="margin-right: 0.25rem;">Cancel</Button>
            <Button HtmlType="submit" Type="@ButtonType.Primary">Submit</Button>
        </Row>
    </FormItem>
</Form>

@code {
    [Parameter]
    public string MBookId { get; set; }

    RABillRequest model = new RABillRequest
    {
        Items = new List<RABillItemRequest>()
    };

    bool loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMBookItemsStatusAsync();
        model.MeasurementBookId = int.Parse(MBookId);
    }

    async Task LoadCurrentMBookItemsStatusAsync()
    {
        loading = true;
        var items = await mBookService.GetCurrentMBItemsStatus(int.Parse(MBookId));
        loading = false;

        foreach (var item in items)
        {
            model.Items.Add(new RABillItemRequest
            {
                MBookItemId = item.MBookItemId,
                MBookItemDescription = item.ItemDescription,
                UnitRate = item.UnitRate,
                AcceptedMeasuredQty = item.AcceptedMeasuredQty,
                TillLastRAQty = item.TillLastRAQty
            });
        }
    }

    async Task OnFormSubmit()
    {
        if (model.Items.Where(p => p.CurrentRAQty > 0).ToList().Count < 1)
        {
            await messageService.Error("Atleast one line item should have value greater than 0");
            return;
        }

        loading = true;
        var result = await raBillService.CreateRABill(model);
        loading = false;

        if (result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}/tab3");
            await messageService.Success(result.Message);
        }
        else
        {
            if (result.Errors.Count == 0)
            {
                await messageService.Error(result.Message);
                return;
            }

            foreach (var error in result.Errors)
            {
                await messageService.Error(error);
            }
        }
    }

    void GoToMBookDetailPage()
    {
        navManager.NavigateTo($"/mbooks/{MBookId}/tab3");
    }
}
