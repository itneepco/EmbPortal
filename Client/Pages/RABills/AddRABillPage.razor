@page "/mbook/{MBookId}/rabill"
@attribute [Authorize]

<h3>Add Recurring Account Bill</h3>

<Table TItem="RABillItemRequest"
       DataSource="@model.Items"
       Size="@TableSize.Small"
       Loading="@loading"
       Bordered HidePagination>
    <Column Title="Description" @bind-Field="@context.ItemDescription"></Column>
    <Column Title="Unit Rate" @bind-Field="@context.UnitRate" Width="10%"></Column>
    <Column Title="Measured Qty (A)" @bind-Field="@context.AcceptedMeasuredQty" Width="10%"></Column>
    <Column Title="Till Last RA Qty" @bind-Field="@context.TillLastRAQty" Width="10%"></Column>
    <Column Title="Available Qty" TData="float" DataIndex="@nameof(context.AvailableQty)" Width="10%" />
    <Column Title="Current RA Qty" TData="float" DataIndex="@nameof(context.CurrentRAQty)" Width="10%" >
        <Input Type="text" @bind-Value="context.CurrentRAQty" />
    </Column>
</Table>

@code {
    [Parameter]
    public string MBookId { get; set; }

    RABillRequest model = new();
    bool loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMBookItemsStatusAsync();
    }

    async Task LoadCurrentMBookItemsStatusAsync()
    {
        loading = true;
        var items = await mBookService.GetCurrentMBItemsStatus(int.Parse(MBookId));
        loading = false;

        foreach (var item in items)
        {
            model.Items.Add(new RABillItemRequest { 
                MBookItemId = item.MBookItemId,
                ItemDescription = item.ItemDescription,
                UnitRate = item.UnitRate,
                AcceptedMeasuredQty = item.AcceptedMeasuredQty,
                TillLastRAQty = item.TillLastRAQty
            });
        }
    }
}
