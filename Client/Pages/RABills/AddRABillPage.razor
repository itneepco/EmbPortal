@page "/mbook/{MBookId}/rabill"
@using Client.Pages.RABills.RABillStepper
@attribute [Authorize(Roles = "Manager")]

<Breadcrumb Style="margin-bottom: 1rem">
    <BreadcrumbItem Href="/">
        <Icon Type="home" />
        <span>DASHBOARD</span>
    </BreadcrumbItem>
    <BreadcrumbItem Href="@($"/mbooks")">
        <span>MEASUREMENT BOOKS</span>
    </BreadcrumbItem>
    <BreadcrumbItem Href="@($"/mbooks/{MBookId}/tab3")">
        <span>RA BILLS</span>
    </BreadcrumbItem>
    <BreadcrumbItem>
        ADD RA BILL
    </BreadcrumbItem>
</Breadcrumb>
<Row >
    <GridCol Xs="24">
        <Steps Current="@_currentStep">
            <Step Title="RA Bill Basic Info" />
            <Step Title="RA Bill Items" />
        </Steps>
        <CascadingValue Value="this">
            @switch (_currentStep)
            {
                case 0:               
                 <BasicInfoStep />               
                  break;
                case 1:
                    <RABillItems OnSubmit="OnFormSubmit" />              
                  break;

            }
        </CascadingValue>
    </GridCol>
</Row>

@code {
    [Parameter]
    public string MBookId { get; set; }

    public RABillRequest Model = new RABillRequest();
   
    bool loading;
    public  bool Submitting;
    private int _currentStep;


    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentMBookItemsStatusAsync();
        Model.MeasurementBookId = int.Parse(MBookId);
    }

    async Task LoadCurrentMBookItemsStatusAsync()
    {
        loading = true;
        var items = await mBookService.GetCurrentMBItemsStatus(int.Parse(MBookId));
        loading = false;

        foreach (var item in items)
        {
            if (item.AvailableRAQty <= 0) continue;

            Model.Items.Add(new RABillItemRequest
                {
                    WorkOrderItemId = item.MBookItemId,
                    WorkOrderItemDescription = item.ItemDescription,
                    PoQuantity = item.PoQuantity,
                    UnitRate = item.UnitRate,
                    AcceptedMeasuredQty = item.AcceptedMeasuredQty,
                    TillLastRAQty = item.TillLastRAQty
                });
        }
    }

    async Task OnFormSubmit()
    {
        if (Model.Items.Where(p => p.CurrentRAQty > 0).ToList().Count < 1)
        {
            await messageService.Error("Atleast one line item should have value greater than 0");
            return;
        }

        Submitting = true;
        var result = await raBillService.CreateRABill(Model);
        Submitting = false;

        if (result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}/tab3");
            await messageService.Success(result.Message);
        }
        else
        {
            if (result.Errors.Count == 0)
            {
                await messageService.Error(result.Message);
                return;
            }

            foreach (var error in result.Errors)
            {
                await messageService.Error(error);
            }
        }
    }

    public void Next()
    {
        _currentStep += 1;
        StateHasChanged();
    }

    public void Prev()
    {
        if (_currentStep <= 0) return;
        _currentStep -= 1;

        StateHasChanged();
    }

    void GoToMBookDetailPage()
    {
        navManager.NavigateTo($"/mbooks/{MBookId}/tab3");
    }
}
