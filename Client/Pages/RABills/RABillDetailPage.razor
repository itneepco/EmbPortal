@page "/mbook/{MBookId}/rabill/{RABillId}/details"

<Breadcrumb Style="margin-bottom: 0.5rem">
    <BreadcrumbItem Href="/">
        <Icon Type="home" />
        <span>DASHBOARD</span>
    </BreadcrumbItem>
    <BreadcrumbItem Href="@($"/mbooks")">
        <span>MEASUREMENT BOOKS</span>
    </BreadcrumbItem>
    <BreadcrumbItem Href="@($"/mbooks/{MBookId}/tab3")">
        <span>RA BILLS</span>
    </BreadcrumbItem>
    <BreadcrumbItem>
        RA BILL DETAILS
    </BreadcrumbItem>
</Breadcrumb>

@if (raBill != null)
{
    <Row Style="margin-bottom: 0.75rem">

        <GridCol Flex="1"></GridCol>
        <GridCol>
            <Popconfirm Title="Sure to download?"
                        OnConfirm="@GeneratePdf"
                        OkText="Yes"
                        CancelText="No">
                <Button Icon="@(IconType.Outline.Download)"
                        Shape="@ButtonShape.CircleOutline"
                        Loading="@downloading">
                    Generate Report
                </Button>
            </Popconfirm>


            @if ((raBill.Status == RABillStatus.CREATED || raBill.Status == RABillStatus.REVOKED)
           && (employeeCode == raBill.EicEmpCode))
            {
                <Popconfirm Title="Approve RA Bill?"
                            OnConfirm="@ApproveRABill"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)"
                            Type="@ButtonType.Primary"
                            Loading="@loading"
                            style="margin-right: 0.15rem">
                        Approve
                    </Button>
                </Popconfirm>
            }

            @if (raBill.Status == RABillStatus.APPROVED && employeeCode == raBill.EicEmpCode)
            {
                <Popconfirm Title="Post to SAP"
                            OnConfirm="@PostRABill"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.CarryOut)"
                            Type="@ButtonType.Primary"
                            Loading="@loading"
                            style="margin-right: 0.15rem">
                        Post to SAP
                    </Button>
                </Popconfirm>
            }
        </GridCol>
    </Row>

    <Row Style="margin-top: 12px;">
        <GridCol Span="4">
            <Text Strong="true" >RA Bill No:</Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.Title</Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Bill Date: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.BillDate.ToString("dd-MMM-yyyy") </Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Period From Date: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.FromDate.ToString("dd-MMM-yyyy") </Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Period To Date: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.ToDate.ToString("dd-MMM-yyyy") </Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Last Bill Detail: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.LastBillDetail </Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Actual Completion Date: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.CompletionDate?.ToString("dd-MMM-yyyy") </Text>
        </GridCol>
        <GridCol Span="4">
            <Text Strong="true">Remarks: </Text>
        </GridCol>
        <GridCol Span="8">
            <Text Strong="false">@raBill.Remarks </Text>
        </GridCol>
    </Row>


    <Divider Plain>RA Bill Items</Divider>

    <Table DataSource="raBill.Items.Where(p => p.CurrentRAQty > 0)"
           PageSize="raBill.Items.Count"
           Size="@TableSize.Small"
           ScrollX="1400"
           ScrollY="800"
           Loading="@loading"
       Bordered>

     <Column Title="Service No" @bind-Field="@context.ServiceNo" Width="100" Fixed="left" />
     <Column Title="Service Description" @bind-Field="@context.ShortServiceDesc" Width="350" Fixed="left" />
     <Column Title="PO Qty" TData="decimal" DataIndex="@nameof(context.CurrentRAQty)" />
     <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.UnitRate)" />
     <Column Title="Measured Qty" TData="float">
         @context.AcceptedMeasuredQty.ToString("0.00")
     </Column>
     <Column Title="Till Last RA" TData="float">
         @context.TillLastRAQty.ToString("0.00")
     </Column>
     <Column Title="Current RA Qty" TData="float">
         @context.CurrentRAQty.ToString("0.00")
     </Column>
     <Column Title="Current RA (Rs)" TData="decimal">
         @context.CurrentRAAmount.ToString("0.00")
     </Column>
     <Column Title="Remarks" TData="string" DataIndex="@nameof(context.Remarks)" Width="250" />
 </Table>

    <Divider Plain>RA Deductions</Divider>

    @if (!(raBill.Status == RABillStatus.APPROVED || raBill.Status == RABillStatus.POSTED))
    {
        <Button Icon="@(IconType.Outline.Plus)"
                Type="@(ButtonType.Primary)"
                Style="margin: 0.5rem 0"
                OnClick="@OpenSideDrawer">
            Add Deductions
        </Button>
    }


    <Table DataSource="raBill.Deductions"
           PageSize="raBill.Deductions.Count"
           Size="@TableSize.Small"
           Loading="@loading"
       HidePagination Bordered>

     <Column Title="Line Item Description" @bind-Field="@context.Description" Width="60%" />
     <Column Title="Unit Rate" TData="decimal" DataIndex="@nameof(context.Amount)" Width="20%" />
     <ActionColumn Title="Action" Width="20%">
         @if (!(raBill.Status == RABillStatus.APPROVED || raBill.Status == RABillStatus.POSTED))
            {
                <Popconfirm Title="Sure to delete?"
                            OnConfirm="()=> DeleteRADeduction(context.Id)"
                            OkText="Yes"
                            CancelText="No">
                    <Button Icon="@(IconType.Outline.Delete)"
                            Size="@ButtonSize.Small"
                            Loading="@loading" Danger>
                 Delete
             </Button>
         </Popconfirm>
            }
        </ActionColumn>
    </Table>
    <Descriptions Title="Summary" Style="margin-top: 1rem;">
        <DescriptionsItem Title="Total RA Amount (Rs.):">@raBill.TotalAmount.ToString("0.00")</DescriptionsItem>
        <DescriptionsItem Title="Total Deduction (Rs.): "> @raBill.TotalDeduction.ToString("0.00")</DescriptionsItem>
        <DescriptionsItem Title=" Net Amount (Rs.):">
            @raBill.NetAmount.ToString("0.00")
        </DescriptionsItem>

    </Descriptions>
}
else
{
    <Spin>
        <Empty />
    </Spin>
}
@* <RABillReportDrawer Visible="@reportModalVisible" Title="Create RA Bill"/> *@
<Modal Title="Create Report" Visible="@reportModalVisible" OnOk="@HandleOk" OnCancel="@HandleCancel">
    This is a modal to generate report
</Modal>
<AddRADeductionDrawer RABillId="@(int.Parse(RABillId))"
                      Visible="@drawerVisible"
                      OnClose="@CloseSideBar"
                      OnItemUpdate="@LoadRABillDetailsAsync" />
<style>
    .ant-typography{
        font-size: 14px !important;
    }
</style>
@code {
    [Parameter]
    public string MBookId { get; set; }

    [Parameter]
    public string RABillId { get; set; }

    public RABillDetailResponse raBill { get; set; }
    bool loading;
    bool downloading;
    bool drawerVisible;
    bool reportModalVisible;
    string employeeCode;

    private Dictionary<string, int> column = new Dictionary<string, int> {
        { "xxl", 3 },
        { "xl", 3},
        { "lg", 2},
        { "md", 2},
        { "sm", 1},
        { "xs", 1}
    };


    protected override async Task OnInitializedAsync()
    {
        var state = await stateProvider.GetAuthenticationStateAsync();
        employeeCode = state.User.GetEmployeeCodeFromClaimsPrincipal();

        await LoadRABillDetailsAsync();
    }

    async Task LoadRABillDetailsAsync()
    {
        loading = true;
        var result = await raBillService.GetRABillById(int.Parse(RABillId));

        if (!result.Succeeded)
        {
            navManager.NavigateTo($"/mbooks/{MBookId}/tab3");
            await messageService.Warning(result.Message);
            return;
        }

        raBill = result.Data;

        loading = false;
        StateHasChanged();
    }

    async Task DeleteRADeduction(int deductionId)
    {
        loading = true;
        var result = await raBillService.DeleteRADeduction(int.Parse(RABillId), deductionId);
        loading = false;

        if (result.Succeeded)
        {
            raBill.Deductions = raBill.Deductions.Where(item => item.Id != deductionId).ToList();
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    async Task GeneratePdf()
    {
        downloading = true;
        var base64 = await raBillService.GeneratePdf(raBill.Id);
        downloading = false;

        string mimeType = "application/pdf";
        string name = Guid.NewGuid().ToString();

        await _jsRuntime.InvokeVoidAsync("Download", new
        {
            ByteArray = base64,
            FileName = name,
            MimeType = mimeType
        });
    }

    async Task ApproveRABill()
    {
        loading = true;
        var result = await raBillService.ApproveRABill(raBill.Id);
        loading = false;

        if (result.Succeeded)
        {
            raBill.Status = RABillStatus.APPROVED;
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }


    async Task PostRABill()
    {
        loading = true;
        var result = await raBillService.PostRABillToSAP(raBill.Id);
        loading = false;

        if (result.Succeeded)
        {
            raBill.Status = RABillStatus.POSTED;
            StateHasChanged();
            await messageService.Success(result.Message);
        }
        else
        {
            await messageService.Error(result.Message);
        }
    }

    void OpenSideDrawer()
    {
        drawerVisible = true;
    }

    void CloseSideBar()
    {
        drawerVisible = false;
    }

    private void HandleOk(MouseEventArgs e)
    {
        reportModalVisible = false;
    }
    private void HandleCancel(MouseEventArgs e)
    {
        reportModalVisible = false;
    }
}
