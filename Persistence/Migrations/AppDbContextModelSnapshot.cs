// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Designation")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.ItemAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FileNormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("MBSheetItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MBSheetItemId");

                    b.ToTable("ItemAttachment");
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AcceptingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AcceptingOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("MeasurementBookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MeasurementOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ValidationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ValidationOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptingOfficer");

                    b.HasIndex("MeasurementBookId");

                    b.HasIndex("MeasurementOfficer");

                    b.HasIndex("ValidationOfficer");

                    b.ToTable("MBSheets");
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("MBSheetId")
                        .HasColumnType("int");

                    b.Property<int>("MBookItemId")
                        .HasColumnType("int");

                    b.Property<int>("Nos")
                        .HasColumnType("int");

                    b.Property<long>("ServiceNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortServiceDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("UnitRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Uom")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<float>("Value1")
                        .HasColumnType("float");

                    b.Property<float>("Value2")
                        .HasColumnType("float");

                    b.Property<float>("Value3")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MBSheetId");

                    b.HasIndex("MBookItemId");

                    b.ToTable("MBSheetItem");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MBookItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int?>("MeasurementBookId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementBookId");

                    b.HasIndex("WorkOrderItemId")
                        .IsUnique();

                    b.ToTable("MBookItem");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MeasurementBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("MeasurementOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ValidatingOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementOfficer");

                    b.HasIndex("ValidatingOfficer");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("MeasurementBooks");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RABill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcceptingOfficer")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("MeasurementBookId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptingOfficer");

                    b.HasIndex("MeasurementBookId");

                    b.ToTable("RABills");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RABillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AcceptedMeasuredQty")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<float>("CurrentRAQty")
                        .HasColumnType("float");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<int>("MBookItemId")
                        .HasColumnType("int");

                    b.Property<string>("PackageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RABillId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ServiceNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortServiceDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("SubItemNo")
                        .HasColumnType("int");

                    b.Property<string>("SubItemPackageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("TillLastRAQty")
                        .HasColumnType("float");

                    b.Property<decimal>("UnitRate")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("RABillId");

                    b.ToTable("RABillItem");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RADeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("RABillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RABillId");

                    b.ToTable("RADeduction");
                });

            modelBuilder.Entity("Domain.Entities.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Dimension")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Uoms");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contractor")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("EngineerInCharge")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("OrderNo")
                        .HasColumnType("bigint");

                    b.Property<string>("Project")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EngineerInCharge");

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ItemNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LongServiceDesc")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PackageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("PoQuantity")
                        .HasColumnType("float");

                    b.Property<long>("ServiceNo")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortServiceDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SubItemNo")
                        .HasColumnType("int");

                    b.Property<string>("SubItemPackageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("UnitRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UomId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UomId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.ItemAttachment", b =>
                {
                    b.HasOne("Domain.Entities.MBSheetAggregate.MBSheetItem", "MBSheetItem")
                        .WithMany("Attachments")
                        .HasForeignKey("MBSheetItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBSheetItem");
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheet", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", "Acceptor")
                        .WithMany()
                        .HasForeignKey("AcceptingOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MeasurementBookAggregate.MeasurementBook", "MeasurementBook")
                        .WithMany()
                        .HasForeignKey("MeasurementBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.AppUser", "Measurer")
                        .WithMany()
                        .HasForeignKey("MeasurementOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.AppUser", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidationOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Acceptor");

                    b.Navigation("MeasurementBook");

                    b.Navigation("Measurer");

                    b.Navigation("Validator");
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheetItem", b =>
                {
                    b.HasOne("Domain.Entities.MBSheetAggregate.MBSheet", "MBSheet")
                        .WithMany("Items")
                        .HasForeignKey("MBSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MeasurementBookAggregate.MBookItem", null)
                        .WithMany("MBSheetItems")
                        .HasForeignKey("MBookItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MBSheet");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MBookItem", b =>
                {
                    b.HasOne("Domain.Entities.MeasurementBookAggregate.MeasurementBook", null)
                        .WithMany("Items")
                        .HasForeignKey("MeasurementBookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.WorkOrderAggregate.WorkOrderItem", "WorkOrderItem")
                        .WithOne("MBookItem")
                        .HasForeignKey("Domain.Entities.MeasurementBookAggregate.MBookItem", "WorkOrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrderItem");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MeasurementBook", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", "Measurer")
                        .WithMany()
                        .HasForeignKey("MeasurementOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.AppUser", "Validator")
                        .WithMany()
                        .HasForeignKey("ValidatingOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrderAggregate.WorkOrder", "WorkOrder")
                        .WithMany("MeasurementBooks")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Measurer");

                    b.Navigation("Validator");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RABill", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", "Acceptor")
                        .WithMany()
                        .HasForeignKey("AcceptingOfficer")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MeasurementBookAggregate.MeasurementBook", "MeasurementBook")
                        .WithMany()
                        .HasForeignKey("MeasurementBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acceptor");

                    b.Navigation("MeasurementBook");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RABillItem", b =>
                {
                    b.HasOne("Domain.Entities.RABillAggregate.RABill", "RABill")
                        .WithMany("Items")
                        .HasForeignKey("RABillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RABill");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RADeduction", b =>
                {
                    b.HasOne("Domain.Entities.RABillAggregate.RABill", "RABill")
                        .WithMany("Deductions")
                        .HasForeignKey("RABillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RABill");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", "Engineer")
                        .WithMany()
                        .HasForeignKey("EngineerInCharge")
                        .HasPrincipalKey("UserName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Engineer");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.WorkOrderAggregate.WorkOrder", null)
                        .WithMany("Items")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.MBSheetAggregate.MBSheetItem", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MBookItem", b =>
                {
                    b.Navigation("MBSheetItems");
                });

            modelBuilder.Entity("Domain.Entities.MeasurementBookAggregate.MeasurementBook", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.RABillAggregate.RABill", b =>
                {
                    b.Navigation("Deductions");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("MeasurementBooks");
                });

            modelBuilder.Entity("Domain.Entities.WorkOrderAggregate.WorkOrderItem", b =>
                {
                    b.Navigation("MBookItem");
                });
#pragma warning restore 612, 618
        }
    }
}
